// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network/tcp_proxy/v2/tcp_proxy.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Network.TcpProxy.V2 {

  /// <summary>Holder for reflection information generated from network/tcp_proxy/v2/tcp_proxy.proto</summary>
  public static partial class TcpProxyReflection {

    #region Descriptor
    /// <summary>File descriptor for network/tcp_proxy/v2/tcp_proxy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TcpProxyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRuZXR3b3JrL3RjcF9wcm94eS92Mi90Y3BfcHJveHkucHJvdG8SKGVudm95",
            "LmNvbmZpZy5maWx0ZXIubmV0d29yay50Y3BfcHJveHkudjIaMGVudm95L2Nv",
            "bmZpZy9maWx0ZXIvYWNjZXNzbG9nL3YyL2FjY2Vzc2xvZy5wcm90bxofZW52",
            "b3kvYXBpL3YyL2NvcmUvYWRkcmVzcy5wcm90bxoeZ29vZ2xlL3Byb3RvYnVm",
            "L2R1cmF0aW9uLnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJv",
            "dG8aF3ZhbGlkYXRlL3ZhbGlkYXRlLnByb3RvGhRnb2dvcHJvdG8vZ29nby5w",
            "cm90byKYBgoIVGNwUHJveHkSHgoLc3RhdF9wcmVmaXgYASABKAlCCbrpwAME",
            "cgIgARIPCgdjbHVzdGVyGAIgASgJEj8KDGlkbGVfdGltZW91dBgIIAEoCzIZ",
            "Lmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkIOuunAAwWqAQIqAJjfHwESOgoX",
            "ZG93bnN0cmVhbV9pZGxlX3RpbWVvdXQYAyABKAsyGS5nb29nbGUucHJvdG9i",
            "dWYuRHVyYXRpb24SOAoVdXBzdHJlYW1faWRsZV90aW1lb3V0GAQgASgLMhku",
            "Z29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEj8KCmFjY2Vzc19sb2cYBSADKAsy",
            "Ky5lbnZveS5jb25maWcuZmlsdGVyLmFjY2Vzc2xvZy52Mi5BY2Nlc3NMb2cS",
            "WgoNZGVwcmVjYXRlZF92MRgGIAEoCzI/LmVudm95LmNvbmZpZy5maWx0ZXIu",
            "bmV0d29yay50Y3BfcHJveHkudjIuVGNwUHJveHkuRGVwcmVjYXRlZFYxQgIY",
            "ARJFChRtYXhfY29ubmVjdF9hdHRlbXB0cxgHIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5VSW50MzJWYWx1ZUIJuunAAwQqAigBGr8CCgxEZXByZWNhdGVkVjES",
            "ZAoGcm91dGVzGAEgAygLMkguZW52b3kuY29uZmlnLmZpbHRlci5uZXR3b3Jr",
            "LnRjcF9wcm94eS52Mi5UY3BQcm94eS5EZXByZWNhdGVkVjEuVENQUm91dGVC",
            "CrrpwAMFkgECCAEayAEKCFRDUFJvdXRlEhoKB2NsdXN0ZXIYASABKAlCCbrp",
            "wAMEcgIgARI5ChNkZXN0aW5hdGlvbl9pcF9saXN0GAIgAygLMhwuZW52b3ku",
            "YXBpLnYyLmNvcmUuQ2lkclJhbmdlEhkKEWRlc3RpbmF0aW9uX3BvcnRzGAMg",
            "ASgJEjQKDnNvdXJjZV9pcF9saXN0GAQgAygLMhwuZW52b3kuYXBpLnYyLmNv",
            "cmUuQ2lkclJhbmdlEhQKDHNvdXJjZV9wb3J0cxgFIAEoCUIEWgJ2MmIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor, global::Envoy.Api.V2.Core.AddressReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy), global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Parser, new[]{ "StatPrefix", "Cluster", "IdleTimeout", "DownstreamIdleTimeout", "UpstreamIdleTimeout", "AccessLog", "DeprecatedV1", "MaxConnectAttempts" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1), global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1.Parser, new[]{ "Routes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1.Types.TCPRoute), global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1.Types.TCPRoute.Parser, new[]{ "Cluster", "DestinationIpList", "DestinationPorts", "SourceIpList", "SourcePorts" }, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TcpProxy : pb::IMessage<TcpProxy> {
    private static readonly pb::MessageParser<TcpProxy> _parser = new pb::MessageParser<TcpProxy>(() => new TcpProxy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TcpProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProxy(TcpProxy other) : this() {
      statPrefix_ = other.statPrefix_;
      cluster_ = other.cluster_;
      IdleTimeout = other.idleTimeout_ != null ? other.IdleTimeout.Clone() : null;
      DownstreamIdleTimeout = other.downstreamIdleTimeout_ != null ? other.DownstreamIdleTimeout.Clone() : null;
      UpstreamIdleTimeout = other.upstreamIdleTimeout_ != null ? other.UpstreamIdleTimeout.Clone() : null;
      accessLog_ = other.accessLog_.Clone();
      DeprecatedV1 = other.deprecatedV1_ != null ? other.DeprecatedV1.Clone() : null;
      MaxConnectAttempts = other.MaxConnectAttempts;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProxy Clone() {
      return new TcpProxy(this);
    }

    /// <summary>Field number for the "stat_prefix" field.</summary>
    public const int StatPrefixFieldNumber = 1;
    private string statPrefix_ = "";
    /// <summary>
    /// The prefix to use when emitting :ref:`statistics
    /// &lt;config_network_filters_tcp_proxy_stats>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatPrefix {
      get { return statPrefix_; }
      set {
        statPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster" field.</summary>
    public const int ClusterFieldNumber = 2;
    private string cluster_ = "";
    /// <summary>
    /// The upstream cluster to connect to.
    ///
    /// .. note::
    ///
    ///  Once full filter chain matching is implemented in listeners, this field will become the only
    ///  way to configure the target cluster. All other matching will be done via :ref:`filter chain
    ///  matching rules &lt;envoy_api_msg_listener.FilterChainMatch>`. For very simple configurations,
    ///  this field can still be used to select the cluster when no other matching rules are required.
    ///  Otherwise, a :ref:`deprecated_v1
    ///  &lt;envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.deprecated_v1>` configuration is
    ///  required to use more complex routing in the interim.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cluster {
      get { return cluster_; }
      set {
        cluster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idle_timeout" field.</summary>
    public const int IdleTimeoutFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Duration idleTimeout_;
    /// <summary>
    /// The idle timeout for connections managed by the TCP proxy filter. The idle timeout
    /// is defined as the period in which there are no bytes sent or received on either
    /// the upstream or downstream connection. If not set, connections will never be closed
    /// by the TCP proxy due to being idle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration IdleTimeout {
      get { return idleTimeout_; }
      set {
        idleTimeout_ = value;
      }
    }

    /// <summary>Field number for the "downstream_idle_timeout" field.</summary>
    public const int DownstreamIdleTimeoutFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration downstreamIdleTimeout_;
    /// <summary>
    /// [#not-implemented-hide:] The idle timeout for connections managed by the TCP proxy
    /// filter. The idle timeout is defined as the period in which there is no
    /// active traffic. If not set, there is no idle timeout. When the idle timeout
    /// is reached the connection will be closed. The distinction between
    /// downstream_idle_timeout/upstream_idle_timeout provides a means to set
    /// timeout based on the last byte sent on the downstream/upstream connection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration DownstreamIdleTimeout {
      get { return downstreamIdleTimeout_; }
      set {
        downstreamIdleTimeout_ = value;
      }
    }

    /// <summary>Field number for the "upstream_idle_timeout" field.</summary>
    public const int UpstreamIdleTimeoutFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Duration upstreamIdleTimeout_;
    /// <summary>
    /// [#not-implemented-hide:]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration UpstreamIdleTimeout {
      get { return upstreamIdleTimeout_; }
      set {
        upstreamIdleTimeout_ = value;
      }
    }

    /// <summary>Field number for the "access_log" field.</summary>
    public const int AccessLogFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Accesslog.V2.AccessLog> _repeated_accessLog_codec
        = pb::FieldCodec.ForMessage(42, global::Envoy.Config.Filter.Accesslog.V2.AccessLog.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLog> accessLog_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLog>();
    /// <summary>
    /// Configuration for :ref:`access logs &lt;arch_overview_access_logs>`
    /// emitted by the this tcp_proxy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLog> AccessLog {
      get { return accessLog_; }
    }

    /// <summary>Field number for the "deprecated_v1" field.</summary>
    public const int DeprecatedV1FieldNumber = 6;
    private global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1 deprecatedV1_;
    /// <summary>
    /// TCP Proxy filter configuration using deprecated V1 format. This is required for complex
    /// routing until filter chain matching in the listener is implemented.
    ///
    /// .. attention::
    ///
    ///   Using this field will lead to `problems loading the configuration
    ///   &lt;https://github.com/envoyproxy/envoy/issues/2441>`_. If you
    ///   want to configure the filter using v1 config structure, please make this
    ///   field a boolean with value ``true`` and configure via the opaque ``value`` field
    ///   like is suggested in the filter `README
    ///   &lt;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/config/filter/README.md>`_.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1 DeprecatedV1 {
      get { return deprecatedV1_; }
      set {
        deprecatedV1_ = value;
      }
    }

    /// <summary>Field number for the "max_connect_attempts" field.</summary>
    public const int MaxConnectAttemptsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint?> _single_maxConnectAttempts_codec = pb::FieldCodec.ForStructWrapper<uint>(58);
    private uint? maxConnectAttempts_;
    /// <summary>
    /// The maximum number of unsuccessful connection attempts that will be made before
    /// giving up. If the parameter is not specified, 1 connection attempt will be made.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? MaxConnectAttempts {
      get { return maxConnectAttempts_; }
      set {
        maxConnectAttempts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TcpProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TcpProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatPrefix != other.StatPrefix) return false;
      if (Cluster != other.Cluster) return false;
      if (!object.Equals(IdleTimeout, other.IdleTimeout)) return false;
      if (!object.Equals(DownstreamIdleTimeout, other.DownstreamIdleTimeout)) return false;
      if (!object.Equals(UpstreamIdleTimeout, other.UpstreamIdleTimeout)) return false;
      if(!accessLog_.Equals(other.accessLog_)) return false;
      if (!object.Equals(DeprecatedV1, other.DeprecatedV1)) return false;
      if (MaxConnectAttempts != other.MaxConnectAttempts) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatPrefix.Length != 0) hash ^= StatPrefix.GetHashCode();
      if (Cluster.Length != 0) hash ^= Cluster.GetHashCode();
      if (idleTimeout_ != null) hash ^= IdleTimeout.GetHashCode();
      if (downstreamIdleTimeout_ != null) hash ^= DownstreamIdleTimeout.GetHashCode();
      if (upstreamIdleTimeout_ != null) hash ^= UpstreamIdleTimeout.GetHashCode();
      hash ^= accessLog_.GetHashCode();
      if (deprecatedV1_ != null) hash ^= DeprecatedV1.GetHashCode();
      if (maxConnectAttempts_ != null) hash ^= MaxConnectAttempts.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatPrefix);
      }
      if (Cluster.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cluster);
      }
      if (downstreamIdleTimeout_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DownstreamIdleTimeout);
      }
      if (upstreamIdleTimeout_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UpstreamIdleTimeout);
      }
      accessLog_.WriteTo(output, _repeated_accessLog_codec);
      if (deprecatedV1_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeprecatedV1);
      }
      if (maxConnectAttempts_ != null) {
        _single_maxConnectAttempts_codec.WriteTagAndValue(output, MaxConnectAttempts);
      }
      if (idleTimeout_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(IdleTimeout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatPrefix);
      }
      if (Cluster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cluster);
      }
      if (idleTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdleTimeout);
      }
      if (downstreamIdleTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownstreamIdleTimeout);
      }
      if (upstreamIdleTimeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpstreamIdleTimeout);
      }
      size += accessLog_.CalculateSize(_repeated_accessLog_codec);
      if (deprecatedV1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedV1);
      }
      if (maxConnectAttempts_ != null) {
        size += _single_maxConnectAttempts_codec.CalculateSizeWithTag(MaxConnectAttempts);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TcpProxy other) {
      if (other == null) {
        return;
      }
      if (other.StatPrefix.Length != 0) {
        StatPrefix = other.StatPrefix;
      }
      if (other.Cluster.Length != 0) {
        Cluster = other.Cluster;
      }
      if (other.idleTimeout_ != null) {
        if (idleTimeout_ == null) {
          idleTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        IdleTimeout.MergeFrom(other.IdleTimeout);
      }
      if (other.downstreamIdleTimeout_ != null) {
        if (downstreamIdleTimeout_ == null) {
          downstreamIdleTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        DownstreamIdleTimeout.MergeFrom(other.DownstreamIdleTimeout);
      }
      if (other.upstreamIdleTimeout_ != null) {
        if (upstreamIdleTimeout_ == null) {
          upstreamIdleTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        UpstreamIdleTimeout.MergeFrom(other.UpstreamIdleTimeout);
      }
      accessLog_.Add(other.accessLog_);
      if (other.deprecatedV1_ != null) {
        if (deprecatedV1_ == null) {
          deprecatedV1_ = new global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1();
        }
        DeprecatedV1.MergeFrom(other.DeprecatedV1);
      }
      if (other.maxConnectAttempts_ != null) {
        if (maxConnectAttempts_ == null || other.MaxConnectAttempts != 0) {
          MaxConnectAttempts = other.MaxConnectAttempts;
        }
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StatPrefix = input.ReadString();
            break;
          }
          case 18: {
            Cluster = input.ReadString();
            break;
          }
          case 26: {
            if (downstreamIdleTimeout_ == null) {
              downstreamIdleTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(downstreamIdleTimeout_);
            break;
          }
          case 34: {
            if (upstreamIdleTimeout_ == null) {
              upstreamIdleTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(upstreamIdleTimeout_);
            break;
          }
          case 42: {
            accessLog_.AddEntriesFrom(input, _repeated_accessLog_codec);
            break;
          }
          case 50: {
            if (deprecatedV1_ == null) {
              deprecatedV1_ = new global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1();
            }
            input.ReadMessage(deprecatedV1_);
            break;
          }
          case 58: {
            uint? value = _single_maxConnectAttempts_codec.Read(input);
            if (maxConnectAttempts_ == null || value != 0) {
              MaxConnectAttempts = value;
            }
            break;
          }
          case 66: {
            if (idleTimeout_ == null) {
              idleTimeout_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(idleTimeout_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TcpProxy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// TCP Proxy filter configuration using V1 format, until Envoy gets the
      /// ability to match source/destination at the listener level (called
      /// :ref:`filter chain match &lt;envoy_api_msg_listener.FilterChainMatch>`).
      /// </summary>
      public sealed partial class DeprecatedV1 : pb::IMessage<DeprecatedV1> {
        private static readonly pb::MessageParser<DeprecatedV1> _parser = new pb::MessageParser<DeprecatedV1>(() => new DeprecatedV1());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeprecatedV1> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeprecatedV1() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeprecatedV1(DeprecatedV1 other) : this() {
          routes_ = other.routes_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeprecatedV1 Clone() {
          return new DeprecatedV1(this);
        }

        /// <summary>Field number for the "routes" field.</summary>
        public const int RoutesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1.Types.TCPRoute> _repeated_routes_codec
            = pb::FieldCodec.ForMessage(10, global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1.Types.TCPRoute.Parser);
        private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1.Types.TCPRoute> routes_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1.Types.TCPRoute>();
        /// <summary>
        /// The route table for the filter. All filter instances must have a route
        /// table, even if it is empty.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1.Types.TCPRoute> Routes {
          get { return routes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DeprecatedV1);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeprecatedV1 other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!routes_.Equals(other.routes_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= routes_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          routes_.WriteTo(output, _repeated_routes_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += routes_.CalculateSize(_repeated_routes_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeprecatedV1 other) {
          if (other == null) {
            return;
          }
          routes_.Add(other.routes_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                routes_.AddEntriesFrom(input, _repeated_routes_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the DeprecatedV1 message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A TCP proxy route consists of a set of optional L4 criteria and the
          /// name of a cluster. If a downstream connection matches all the
          /// specified criteria, the cluster in the route is used for the
          /// corresponding upstream connection. Routes are tried in the order
          /// specified until a match is found. If no match is found, the connection
          /// is closed. A route with no criteria is valid and always produces a
          /// match.
          /// </summary>
          public sealed partial class TCPRoute : pb::IMessage<TCPRoute> {
            private static readonly pb::MessageParser<TCPRoute> _parser = new pb::MessageParser<TCPRoute>(() => new TCPRoute());
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<TCPRoute> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Envoy.Config.Filter.Network.TcpProxy.V2.TcpProxy.Types.DeprecatedV1.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TCPRoute() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TCPRoute(TCPRoute other) : this() {
              cluster_ = other.cluster_;
              destinationIpList_ = other.destinationIpList_.Clone();
              destinationPorts_ = other.destinationPorts_;
              sourceIpList_ = other.sourceIpList_.Clone();
              sourcePorts_ = other.sourcePorts_;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public TCPRoute Clone() {
              return new TCPRoute(this);
            }

            /// <summary>Field number for the "cluster" field.</summary>
            public const int ClusterFieldNumber = 1;
            private string cluster_ = "";
            /// <summary>
            /// The cluster to connect to when a the downstream network connection
            /// matches the specified criteria.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Cluster {
              get { return cluster_; }
              set {
                cluster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "destination_ip_list" field.</summary>
            public const int DestinationIpListFieldNumber = 2;
            private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.CidrRange> _repeated_destinationIpList_codec
                = pb::FieldCodec.ForMessage(18, global::Envoy.Api.V2.Core.CidrRange.Parser);
            private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange> destinationIpList_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange>();
            /// <summary>
            /// An optional list of IP address subnets in the form
            /// “ip_address/xx”. The criteria is satisfied if the destination IP
            /// address of the downstream connection is contained in at least one of
            /// the specified subnets. If the parameter is not specified or the list
            /// is empty, the destination IP address is ignored. The destination IP
            /// address of the downstream connection might be different from the
            /// addresses on which the proxy is listening if the connection has been
            /// redirected.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange> DestinationIpList {
              get { return destinationIpList_; }
            }

            /// <summary>Field number for the "destination_ports" field.</summary>
            public const int DestinationPortsFieldNumber = 3;
            private string destinationPorts_ = "";
            /// <summary>
            /// An optional string containing a comma-separated list of port numbers
            /// or ranges. The criteria is satisfied if the destination port of the
            /// downstream connection is contained in at least one of the specified
            /// ranges. If the parameter is not specified, the destination port is
            /// ignored. The destination port address of the downstream connection
            /// might be different from the port on which the proxy is listening if
            /// the connection has been redirected.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string DestinationPorts {
              get { return destinationPorts_; }
              set {
                destinationPorts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "source_ip_list" field.</summary>
            public const int SourceIpListFieldNumber = 4;
            private static readonly pb::FieldCodec<global::Envoy.Api.V2.Core.CidrRange> _repeated_sourceIpList_codec
                = pb::FieldCodec.ForMessage(34, global::Envoy.Api.V2.Core.CidrRange.Parser);
            private readonly pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange> sourceIpList_ = new pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange>();
            /// <summary>
            /// An optional list of IP address subnets in the form
            /// “ip_address/xx”. The criteria is satisfied if the source IP address
            /// of the downstream connection is contained in at least one of the
            /// specified subnets. If the parameter is not specified or the list is
            /// empty, the source IP address is ignored.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Envoy.Api.V2.Core.CidrRange> SourceIpList {
              get { return sourceIpList_; }
            }

            /// <summary>Field number for the "source_ports" field.</summary>
            public const int SourcePortsFieldNumber = 5;
            private string sourcePorts_ = "";
            /// <summary>
            /// An optional string containing a comma-separated list of port numbers
            /// or ranges. The criteria is satisfied if the source port of the
            /// downstream connection is contained in at least one of the specified
            /// ranges. If the parameter is not specified, the source port is
            /// ignored.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SourcePorts {
              get { return sourcePorts_; }
              set {
                sourcePorts_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as TCPRoute);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(TCPRoute other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Cluster != other.Cluster) return false;
              if(!destinationIpList_.Equals(other.destinationIpList_)) return false;
              if (DestinationPorts != other.DestinationPorts) return false;
              if(!sourceIpList_.Equals(other.sourceIpList_)) return false;
              if (SourcePorts != other.SourcePorts) return false;
              return true;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Cluster.Length != 0) hash ^= Cluster.GetHashCode();
              hash ^= destinationIpList_.GetHashCode();
              if (DestinationPorts.Length != 0) hash ^= DestinationPorts.GetHashCode();
              hash ^= sourceIpList_.GetHashCode();
              if (SourcePorts.Length != 0) hash ^= SourcePorts.GetHashCode();
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Cluster.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Cluster);
              }
              destinationIpList_.WriteTo(output, _repeated_destinationIpList_codec);
              if (DestinationPorts.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(DestinationPorts);
              }
              sourceIpList_.WriteTo(output, _repeated_sourceIpList_codec);
              if (SourcePorts.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(SourcePorts);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Cluster.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Cluster);
              }
              size += destinationIpList_.CalculateSize(_repeated_destinationIpList_codec);
              if (DestinationPorts.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationPorts);
              }
              size += sourceIpList_.CalculateSize(_repeated_sourceIpList_codec);
              if (SourcePorts.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SourcePorts);
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(TCPRoute other) {
              if (other == null) {
                return;
              }
              if (other.Cluster.Length != 0) {
                Cluster = other.Cluster;
              }
              destinationIpList_.Add(other.destinationIpList_);
              if (other.DestinationPorts.Length != 0) {
                DestinationPorts = other.DestinationPorts;
              }
              sourceIpList_.Add(other.sourceIpList_);
              if (other.SourcePorts.Length != 0) {
                SourcePorts = other.SourcePorts;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    Cluster = input.ReadString();
                    break;
                  }
                  case 18: {
                    destinationIpList_.AddEntriesFrom(input, _repeated_destinationIpList_codec);
                    break;
                  }
                  case 26: {
                    DestinationPorts = input.ReadString();
                    break;
                  }
                  case 34: {
                    sourceIpList_.AddEntriesFrom(input, _repeated_sourceIpList_codec);
                    break;
                  }
                  case 42: {
                    SourcePorts = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
