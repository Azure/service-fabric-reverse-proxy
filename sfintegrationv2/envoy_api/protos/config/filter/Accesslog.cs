// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accesslog/v2/accesslog.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Accesslog.V2 {

  /// <summary>Holder for reflection information generated from accesslog/v2/accesslog.proto</summary>
  public static partial class AccesslogReflection {

    #region Descriptor
    /// <summary>File descriptor for accesslog/v2/accesslog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccesslogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxhY2Nlc3Nsb2cvdjIvYWNjZXNzbG9nLnByb3RvEiBlbnZveS5jb25maWcu",
            "ZmlsdGVyLmFjY2Vzc2xvZy52MhofZW52b3kvYXBpL3YyL2NvcmUvYWRkcmVz",
            "cy5wcm90bxocZW52b3kvYXBpL3YyL2NvcmUvYmFzZS5wcm90bxoeZ29vZ2xl",
            "L3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGhxnb29nbGUvcHJvdG9idWYvc3Ry",
            "dWN0LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGh5n",
            "b29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aF3ZhbGlkYXRlL3ZhbGlk",
            "YXRlLnByb3RvGhRnb2dvcHJvdG8vZ29nby5wcm90byLFCAoPQWNjZXNzTG9n",
            "Q29tbW9uEjUKC3NhbXBsZV9yYXRlGAEgASgBQiC66cADCxIJIQAAAAAAAAAA",
            "uunAAwsSCRkAAAAAAADwPxI9Chlkb3duc3RyZWFtX3JlbW90ZV9hZGRyZXNz",
            "GAIgASgLMhouZW52b3kuYXBpLnYyLmNvcmUuQWRkcmVzcxI8Chhkb3duc3Ry",
            "ZWFtX2xvY2FsX2FkZHJlc3MYAyABKAsyGi5lbnZveS5hcGkudjIuY29yZS5B",
            "ZGRyZXNzEkcKDnRsc19wcm9wZXJ0aWVzGAQgASgLMi8uZW52b3kuY29uZmln",
            "LmZpbHRlci5hY2Nlc3Nsb2cudjIuVExTUHJvcGVydGllcxI0CgpzdGFydF90",
            "aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIEkN8fARI9",
            "ChR0aW1lX3RvX2xhc3RfcnhfYnl0ZRgGIAEoCzIZLmdvb2dsZS5wcm90b2J1",
            "Zi5EdXJhdGlvbkIEmN8fARJHCh50aW1lX3RvX2ZpcnN0X3Vwc3RyZWFtX3R4",
            "X2J5dGUYByABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CBJjfHwES",
            "RgoddGltZV90b19sYXN0X3Vwc3RyZWFtX3R4X2J5dGUYCCABKAsyGS5nb29n",
            "bGUucHJvdG9idWYuRHVyYXRpb25CBJjfHwESRwoedGltZV90b19maXJzdF91",
            "cHN0cmVhbV9yeF9ieXRlGAkgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0",
            "aW9uQgSY3x8BEkYKHXRpbWVfdG9fbGFzdF91cHN0cmVhbV9yeF9ieXRlGAog",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgSY3x8BEkkKIHRpbWVf",
            "dG9fZmlyc3RfZG93bnN0cmVhbV90eF9ieXRlGAsgASgLMhkuZ29vZ2xlLnBy",
            "b3RvYnVmLkR1cmF0aW9uQgSY3x8BEkgKH3RpbWVfdG9fbGFzdF9kb3duc3Ry",
            "ZWFtX3R4X2J5dGUYDCABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25C",
            "BJjfHwESOwoXdXBzdHJlYW1fcmVtb3RlX2FkZHJlc3MYDSABKAsyGi5lbnZv",
            "eS5hcGkudjIuY29yZS5BZGRyZXNzEjoKFnVwc3RyZWFtX2xvY2FsX2FkZHJl",
            "c3MYDiABKAsyGi5lbnZveS5hcGkudjIuY29yZS5BZGRyZXNzEhgKEHVwc3Ry",
            "ZWFtX2NsdXN0ZXIYDyABKAkSRwoOcmVzcG9uc2VfZmxhZ3MYECABKAsyLy5l",
            "bnZveS5jb25maWcuZmlsdGVyLmFjY2Vzc2xvZy52Mi5SZXNwb25zZUZsYWdz",
            "Ei0KCG1ldGFkYXRhGBEgASgLMhsuZW52b3kuYXBpLnYyLmNvcmUuTWV0YWRh",
            "dGEi6wIKDVJlc3BvbnNlRmxhZ3MSIAoYZmFpbGVkX2xvY2FsX2hlYWx0aGNo",
            "ZWNrGAEgASgIEhsKE25vX2hlYWx0aHlfdXBzdHJlYW0YAiABKAgSIAoYdXBz",
            "dHJlYW1fcmVxdWVzdF90aW1lb3V0GAMgASgIEhMKC2xvY2FsX3Jlc2V0GAQg",
            "ASgIEh0KFXVwc3RyZWFtX3JlbW90ZV9yZXNldBgFIAEoCBIjCht1cHN0cmVh",
            "bV9jb25uZWN0aW9uX2ZhaWx1cmUYBiABKAgSJwofdXBzdHJlYW1fY29ubmVj",
            "dGlvbl90ZXJtaW5hdGlvbhgHIAEoCBIZChF1cHN0cmVhbV9vdmVyZmxvdxgI",
            "IAEoCBIWCg5ub19yb3V0ZV9mb3VuZBgJIAEoCBIWCg5kZWxheV9pbmplY3Rl",
            "ZBgKIAEoCBIWCg5mYXVsdF9pbmplY3RlZBgLIAEoCBIUCgxyYXRlX2xpbWl0",
            "ZWQYDCABKAgiiwIKDVRMU1Byb3BlcnRpZXMSTwoLdGxzX3ZlcnNpb24YASAB",
            "KA4yOi5lbnZveS5jb25maWcuZmlsdGVyLmFjY2Vzc2xvZy52Mi5UTFNQcm9w",
            "ZXJ0aWVzLlRMU1ZlcnNpb24SNgoQdGxzX2NpcGhlcl9zdWl0ZRgCIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZRIYChB0bHNfc25pX2hvc3Ru",
            "YW1lGAMgASgJIlcKClRMU1ZlcnNpb24SFwoTVkVSU0lPTl9VTlNQRUNJRklF",
            "RBAAEgkKBVRMU3YxEAESCwoHVExTdjFfMRACEgsKB1RMU3YxXzIQAxILCgdU",
            "TFN2MV8zEAQiYQoRVENQQWNjZXNzTG9nRW50cnkSTAoRY29tbW9uX3Byb3Bl",
            "cnRpZXMYASABKAsyMS5lbnZveS5jb25maWcuZmlsdGVyLmFjY2Vzc2xvZy52",
            "Mi5BY2Nlc3NMb2dDb21tb24i7QMKFUhUVFBSZXF1ZXN0UHJvcGVydGllcxI4",
            "Cg5yZXF1ZXN0X21ldGhvZBgBIAEoDjIgLmVudm95LmFwaS52Mi5jb3JlLlJl",
            "cXVlc3RNZXRob2QSDgoGc2NoZW1lGAIgASgJEhEKCWF1dGhvcml0eRgDIAEo",
            "CRIqCgRwb3J0GAQgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVl",
            "EgwKBHBhdGgYBSABKAkSEgoKdXNlcl9hZ2VudBgGIAEoCRIPCgdyZWZlcmVy",
            "GAcgASgJEhUKDWZvcndhcmRlZF9mb3IYCCABKAkSEgoKcmVxdWVzdF9pZBgJ",
            "IAEoCRIVCg1vcmlnaW5hbF9wYXRoGAogASgJEh0KFXJlcXVlc3RfaGVhZGVy",
            "c19ieXRlcxgLIAEoBBIaChJyZXF1ZXN0X2JvZHlfYnl0ZXMYDCABKAQSZAoP",
            "cmVxdWVzdF9oZWFkZXJzGA0gAygLMksuZW52b3kuY29uZmlnLmZpbHRlci5h",
            "Y2Nlc3Nsb2cudjIuSFRUUFJlcXVlc3RQcm9wZXJ0aWVzLlJlcXVlc3RIZWFk",
            "ZXJzRW50cnkaNQoTUmVxdWVzdEhlYWRlcnNFbnRyeRILCgNrZXkYASABKAkS",
            "DQoFdmFsdWUYAiABKAk6AjgBIqsCChZIVFRQUmVzcG9uc2VQcm9wZXJ0aWVz",
            "EjMKDXJlc3BvbnNlX2NvZGUYASABKAsyHC5nb29nbGUucHJvdG9idWYuVUlu",
            "dDMyVmFsdWUSHgoWcmVzcG9uc2VfaGVhZGVyc19ieXRlcxgCIAEoBBIbChNy",
            "ZXNwb25zZV9ib2R5X2J5dGVzGAMgASgEEmcKEHJlc3BvbnNlX2hlYWRlcnMY",
            "BCADKAsyTS5lbnZveS5jb25maWcuZmlsdGVyLmFjY2Vzc2xvZy52Mi5IVFRQ",
            "UmVzcG9uc2VQcm9wZXJ0aWVzLlJlc3BvbnNlSGVhZGVyc0VudHJ5GjYKFFJl",
            "c3BvbnNlSGVhZGVyc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEo",
            "CToCOAEioAMKEkhUVFBBY2Nlc3NMb2dFbnRyeRJMChFjb21tb25fcHJvcGVy",
            "dGllcxgBIAEoCzIxLmVudm95LmNvbmZpZy5maWx0ZXIuYWNjZXNzbG9nLnYy",
            "LkFjY2Vzc0xvZ0NvbW1vbhJaChBwcm90b2NvbF92ZXJzaW9uGAIgASgOMkAu",
            "ZW52b3kuY29uZmlnLmZpbHRlci5hY2Nlc3Nsb2cudjIuSFRUUEFjY2Vzc0xv",
            "Z0VudHJ5LkhUVFBWZXJzaW9uEkgKB3JlcXVlc3QYAyABKAsyNy5lbnZveS5j",
            "b25maWcuZmlsdGVyLmFjY2Vzc2xvZy52Mi5IVFRQUmVxdWVzdFByb3BlcnRp",
            "ZXMSSgoIcmVzcG9uc2UYBCABKAsyOC5lbnZveS5jb25maWcuZmlsdGVyLmFj",
            "Y2Vzc2xvZy52Mi5IVFRQUmVzcG9uc2VQcm9wZXJ0aWVzIkoKC0hUVFBWZXJz",
            "aW9uEhgKFFBST1RPQ09MX1VOU1BFQ0lGSUVEEAASCgoGSFRUUDEwEAESCgoG",
            "SFRUUDExEAISCQoFSFRUUDIQAyKFAQoJQWNjZXNzTG9nEgwKBG5hbWUYASAB",
            "KAkSQQoGZmlsdGVyGAIgASgLMjEuZW52b3kuY29uZmlnLmZpbHRlci5hY2Nl",
            "c3Nsb2cudjIuQWNjZXNzTG9nRmlsdGVyEicKBmNvbmZpZxgDIAEoCzIXLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJ1Y3QixAQKD0FjY2Vzc0xvZ0ZpbHRlchJQChJz",
            "dGF0dXNfY29kZV9maWx0ZXIYASABKAsyMi5lbnZveS5jb25maWcuZmlsdGVy",
            "LmFjY2Vzc2xvZy52Mi5TdGF0dXNDb2RlRmlsdGVySAASSwoPZHVyYXRpb25f",
            "ZmlsdGVyGAIgASgLMjAuZW52b3kuY29uZmlnLmZpbHRlci5hY2Nlc3Nsb2cu",
            "djIuRHVyYXRpb25GaWx0ZXJIABJZChdub3RfaGVhbHRoX2NoZWNrX2ZpbHRl",
            "chgDIAEoCzI2LmVudm95LmNvbmZpZy5maWx0ZXIuYWNjZXNzbG9nLnYyLk5v",
            "dEhlYWx0aENoZWNrRmlsdGVySAASTQoQdHJhY2VhYmxlX2ZpbHRlchgEIAEo",
            "CzIxLmVudm95LmNvbmZpZy5maWx0ZXIuYWNjZXNzbG9nLnYyLlRyYWNlYWJs",
            "ZUZpbHRlckgAEkkKDnJ1bnRpbWVfZmlsdGVyGAUgASgLMi8uZW52b3kuY29u",
            "ZmlnLmZpbHRlci5hY2Nlc3Nsb2cudjIuUnVudGltZUZpbHRlckgAEkEKCmFu",
            "ZF9maWx0ZXIYBiABKAsyKy5lbnZveS5jb25maWcuZmlsdGVyLmFjY2Vzc2xv",
            "Zy52Mi5BbmRGaWx0ZXJIABI/Cglvcl9maWx0ZXIYByABKAsyKi5lbnZveS5j",
            "b25maWcuZmlsdGVyLmFjY2Vzc2xvZy52Mi5PckZpbHRlckgAQhkKEGZpbHRl",
            "cl9zcGVjaWZpZXISBbjpwAMBIqgBChBDb21wYXJpc29uRmlsdGVyEk0KAm9w",
            "GAEgASgOMjUuZW52b3kuY29uZmlnLmZpbHRlci5hY2Nlc3Nsb2cudjIuQ29t",
            "cGFyaXNvbkZpbHRlci5PcEIKuunAAwWCAQIQARIvCgV2YWx1ZRgCIAEoCzIg",
            "LmVudm95LmFwaS52Mi5jb3JlLlJ1bnRpbWVVSW50MzIiFAoCT3ASBgoCRVEQ",
            "ABIGCgJHRRABImYKEFN0YXR1c0NvZGVGaWx0ZXISUgoKY29tcGFyaXNvbhgB",
            "IAEoCzIyLmVudm95LmNvbmZpZy5maWx0ZXIuYWNjZXNzbG9nLnYyLkNvbXBh",
            "cmlzb25GaWx0ZXJCCrrpwAMFigECEAEiZAoORHVyYXRpb25GaWx0ZXISUgoK",
            "Y29tcGFyaXNvbhgBIAEoCzIyLmVudm95LmNvbmZpZy5maWx0ZXIuYWNjZXNz",
            "bG9nLnYyLkNvbXBhcmlzb25GaWx0ZXJCCrrpwAMFigECEAEiFgoUTm90SGVh",
            "bHRoQ2hlY2tGaWx0ZXIiEQoPVHJhY2VhYmxlRmlsdGVyIi8KDVJ1bnRpbWVG",
            "aWx0ZXISHgoLcnVudGltZV9rZXkYASABKAlCCbrpwAMEcgIgASJbCglBbmRG",
            "aWx0ZXISTgoHZmlsdGVycxgBIAMoCzIxLmVudm95LmNvbmZpZy5maWx0ZXIu",
            "YWNjZXNzbG9nLnYyLkFjY2Vzc0xvZ0ZpbHRlckIKuunAAwWSAQIIAiJaCghP",
            "ckZpbHRlchJOCgdmaWx0ZXJzGAIgAygLMjEuZW52b3kuY29uZmlnLmZpbHRl",
            "ci5hY2Nlc3Nsb2cudjIuQWNjZXNzTG9nRmlsdGVyQgq66cADBZIBAggCIjgK",
            "DUZpbGVBY2Nlc3NMb2cSFwoEcGF0aBgBIAEoCUIJuunAAwRyAiABEg4KBmZv",
            "cm1hdBgCIAEoCUIEWgJ2MmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.AddressReflection.Descriptor, global::Envoy.Api.V2.Core.BaseReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.AccessLogCommon), global::Envoy.Config.Filter.Accesslog.V2.AccessLogCommon.Parser, new[]{ "SampleRate", "DownstreamRemoteAddress", "DownstreamLocalAddress", "TlsProperties", "StartTime", "TimeToLastRxByte", "TimeToFirstUpstreamTxByte", "TimeToLastUpstreamTxByte", "TimeToFirstUpstreamRxByte", "TimeToLastUpstreamRxByte", "TimeToFirstDownstreamTxByte", "TimeToLastDownstreamTxByte", "UpstreamRemoteAddress", "UpstreamLocalAddress", "UpstreamCluster", "ResponseFlags", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.ResponseFlags), global::Envoy.Config.Filter.Accesslog.V2.ResponseFlags.Parser, new[]{ "FailedLocalHealthcheck", "NoHealthyUpstream", "UpstreamRequestTimeout", "LocalReset", "UpstreamRemoteReset", "UpstreamConnectionFailure", "UpstreamConnectionTermination", "UpstreamOverflow", "NoRouteFound", "DelayInjected", "FaultInjected", "RateLimited" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.TLSProperties), global::Envoy.Config.Filter.Accesslog.V2.TLSProperties.Parser, new[]{ "TlsVersion", "TlsCipherSuite", "TlsSniHostname" }, null, new[]{ typeof(global::Envoy.Config.Filter.Accesslog.V2.TLSProperties.Types.TLSVersion) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.TCPAccessLogEntry), global::Envoy.Config.Filter.Accesslog.V2.TCPAccessLogEntry.Parser, new[]{ "CommonProperties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.HTTPRequestProperties), global::Envoy.Config.Filter.Accesslog.V2.HTTPRequestProperties.Parser, new[]{ "RequestMethod", "Scheme", "Authority", "Port", "Path", "UserAgent", "Referer", "ForwardedFor", "RequestId", "OriginalPath", "RequestHeadersBytes", "RequestBodyBytes", "RequestHeaders" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.HTTPResponseProperties), global::Envoy.Config.Filter.Accesslog.V2.HTTPResponseProperties.Parser, new[]{ "ResponseCode", "ResponseHeadersBytes", "ResponseBodyBytes", "ResponseHeaders" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.HTTPAccessLogEntry), global::Envoy.Config.Filter.Accesslog.V2.HTTPAccessLogEntry.Parser, new[]{ "CommonProperties", "ProtocolVersion", "Request", "Response" }, null, new[]{ typeof(global::Envoy.Config.Filter.Accesslog.V2.HTTPAccessLogEntry.Types.HTTPVersion) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.AccessLog), global::Envoy.Config.Filter.Accesslog.V2.AccessLog.Parser, new[]{ "Name", "Filter", "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter), global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter.Parser, new[]{ "StatusCodeFilter", "DurationFilter", "NotHealthCheckFilter", "TraceableFilter", "RuntimeFilter", "AndFilter", "OrFilter" }, new[]{ "FilterSpecifier" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter), global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter.Parser, new[]{ "Op", "Value" }, null, new[]{ typeof(global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter.Types.Op) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter), global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter.Parser, new[]{ "Comparison" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.DurationFilter), global::Envoy.Config.Filter.Accesslog.V2.DurationFilter.Parser, new[]{ "Comparison" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter), global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter), global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter), global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter.Parser, new[]{ "RuntimeKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.AndFilter), global::Envoy.Config.Filter.Accesslog.V2.AndFilter.Parser, new[]{ "Filters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.OrFilter), global::Envoy.Config.Filter.Accesslog.V2.OrFilter.Parser, new[]{ "Filters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Accesslog.V2.FileAccessLog), global::Envoy.Config.Filter.Accesslog.V2.FileAccessLog.Parser, new[]{ "Path", "Format" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Defines fields that are shared by all Envoy access logs.
  /// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
  /// </summary>
  public sealed partial class AccessLogCommon : pb::IMessage<AccessLogCommon> {
    private static readonly pb::MessageParser<AccessLogCommon> _parser = new pb::MessageParser<AccessLogCommon>(() => new AccessLogCommon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogCommon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogCommon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogCommon(AccessLogCommon other) : this() {
      sampleRate_ = other.sampleRate_;
      DownstreamRemoteAddress = other.downstreamRemoteAddress_ != null ? other.DownstreamRemoteAddress.Clone() : null;
      DownstreamLocalAddress = other.downstreamLocalAddress_ != null ? other.DownstreamLocalAddress.Clone() : null;
      TlsProperties = other.tlsProperties_ != null ? other.TlsProperties.Clone() : null;
      StartTime = other.startTime_ != null ? other.StartTime.Clone() : null;
      TimeToLastRxByte = other.timeToLastRxByte_ != null ? other.TimeToLastRxByte.Clone() : null;
      TimeToFirstUpstreamTxByte = other.timeToFirstUpstreamTxByte_ != null ? other.TimeToFirstUpstreamTxByte.Clone() : null;
      TimeToLastUpstreamTxByte = other.timeToLastUpstreamTxByte_ != null ? other.TimeToLastUpstreamTxByte.Clone() : null;
      TimeToFirstUpstreamRxByte = other.timeToFirstUpstreamRxByte_ != null ? other.TimeToFirstUpstreamRxByte.Clone() : null;
      TimeToLastUpstreamRxByte = other.timeToLastUpstreamRxByte_ != null ? other.TimeToLastUpstreamRxByte.Clone() : null;
      TimeToFirstDownstreamTxByte = other.timeToFirstDownstreamTxByte_ != null ? other.TimeToFirstDownstreamTxByte.Clone() : null;
      TimeToLastDownstreamTxByte = other.timeToLastDownstreamTxByte_ != null ? other.TimeToLastDownstreamTxByte.Clone() : null;
      UpstreamRemoteAddress = other.upstreamRemoteAddress_ != null ? other.UpstreamRemoteAddress.Clone() : null;
      UpstreamLocalAddress = other.upstreamLocalAddress_ != null ? other.UpstreamLocalAddress.Clone() : null;
      upstreamCluster_ = other.upstreamCluster_;
      ResponseFlags = other.responseFlags_ != null ? other.ResponseFlags.Clone() : null;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogCommon Clone() {
      return new AccessLogCommon(this);
    }

    /// <summary>Field number for the "sample_rate" field.</summary>
    public const int SampleRateFieldNumber = 1;
    private double sampleRate_;
    /// <summary>
    /// This field indicates the rate at which this log entry was sampled.
    /// Valid range is (0.0, 1.0].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SampleRate {
      get { return sampleRate_; }
      set {
        sampleRate_ = value;
      }
    }

    /// <summary>Field number for the "downstream_remote_address" field.</summary>
    public const int DownstreamRemoteAddressFieldNumber = 2;
    private global::Envoy.Api.V2.Core.Address downstreamRemoteAddress_;
    /// <summary>
    /// This field is the remote/origin address on which the request from the user was received.
    /// Note: This may not be the physical peer. E.g, if the remote address is inferred from for
    ///       example the x-forwarder-for header, proxy protocol, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Address DownstreamRemoteAddress {
      get { return downstreamRemoteAddress_; }
      set {
        downstreamRemoteAddress_ = value;
      }
    }

    /// <summary>Field number for the "downstream_local_address" field.</summary>
    public const int DownstreamLocalAddressFieldNumber = 3;
    private global::Envoy.Api.V2.Core.Address downstreamLocalAddress_;
    /// <summary>
    /// This field is the local/destination address on which the request from the user was received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Address DownstreamLocalAddress {
      get { return downstreamLocalAddress_; }
      set {
        downstreamLocalAddress_ = value;
      }
    }

    /// <summary>Field number for the "tls_properties" field.</summary>
    public const int TlsPropertiesFieldNumber = 4;
    private global::Envoy.Config.Filter.Accesslog.V2.TLSProperties tlsProperties_;
    /// <summary>
    /// If the connection is secure, this field will contain TLS properties.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.TLSProperties TlsProperties {
      get { return tlsProperties_; }
      set {
        tlsProperties_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// The time that Envoy started servicing this request. This is effectively the time that the first
    /// downstream byte is received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "time_to_last_rx_byte" field.</summary>
    public const int TimeToLastRxByteFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToLastRxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the last
    /// downstream byte received (i.e. time it takes to receive a request).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToLastRxByte {
      get { return timeToLastRxByte_; }
      set {
        timeToLastRxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_first_upstream_tx_byte" field.</summary>
    public const int TimeToFirstUpstreamTxByteFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToFirstUpstreamTxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the first upstream byte sent. There may
    /// by considerable delta between *time_to_last_rx_byte* and this value due to filters.
    /// Additionally, the same caveats apply as documented in *time_to_last_downstream_tx_byte* about
    /// not accounting for kernel socket buffer time, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToFirstUpstreamTxByte {
      get { return timeToFirstUpstreamTxByte_; }
      set {
        timeToFirstUpstreamTxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_last_upstream_tx_byte" field.</summary>
    public const int TimeToLastUpstreamTxByteFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToLastUpstreamTxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the last upstream byte sent. There may
    /// by considerable delta between *time_to_last_rx_byte* and this value due to filters.
    /// Additionally, the same caveats apply as documented in *time_to_last_downstream_tx_byte* about
    /// not accounting for kernel socket buffer time, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToLastUpstreamTxByte {
      get { return timeToLastUpstreamTxByte_; }
      set {
        timeToLastUpstreamTxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_first_upstream_rx_byte" field.</summary>
    public const int TimeToFirstUpstreamRxByteFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToFirstUpstreamRxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the first upstream
    /// byte received (i.e. time it takes to start receiving a response).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToFirstUpstreamRxByte {
      get { return timeToFirstUpstreamRxByte_; }
      set {
        timeToFirstUpstreamRxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_last_upstream_rx_byte" field.</summary>
    public const int TimeToLastUpstreamRxByteFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToLastUpstreamRxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the last upstream
    /// byte received (i.e. time it takes to receive a complete response).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToLastUpstreamRxByte {
      get { return timeToLastUpstreamRxByte_; }
      set {
        timeToLastUpstreamRxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_first_downstream_tx_byte" field.</summary>
    public const int TimeToFirstDownstreamTxByteFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToFirstDownstreamTxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the first downstream byte sent.
    /// There may be a considerable delta between the *time_to_first_upstream_rx_byte* and this field
    /// due to filters. Additionally, the same caveats apply as documented in
    /// *time_to_last_downstream_tx_byte* about not accounting for kernel socket buffer time, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToFirstDownstreamTxByte {
      get { return timeToFirstDownstreamTxByte_; }
      set {
        timeToFirstDownstreamTxByte_ = value;
      }
    }

    /// <summary>Field number for the "time_to_last_downstream_tx_byte" field.</summary>
    public const int TimeToLastDownstreamTxByteFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Duration timeToLastDownstreamTxByte_;
    /// <summary>
    /// Interval between the first downstream byte received and the last downstream byte sent.
    /// Depending on protocol, buffering, windowing, filters, etc. there may be a considerable delta
    /// between *time_to_last_upstream_rx_byte* and this field. Note also that this is an approximate
    /// time. In the current implementation it does not include kernel socket buffer time. In the
    /// current implementation it also does not include send window buffering inside the HTTP/2 codec.
    /// In the future it is likely that work will be done to make this duration more accurate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration TimeToLastDownstreamTxByte {
      get { return timeToLastDownstreamTxByte_; }
      set {
        timeToLastDownstreamTxByte_ = value;
      }
    }

    /// <summary>Field number for the "upstream_remote_address" field.</summary>
    public const int UpstreamRemoteAddressFieldNumber = 13;
    private global::Envoy.Api.V2.Core.Address upstreamRemoteAddress_;
    /// <summary>
    /// The upstream remote/destination address that handles this exchange. This does not include
    /// retries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Address UpstreamRemoteAddress {
      get { return upstreamRemoteAddress_; }
      set {
        upstreamRemoteAddress_ = value;
      }
    }

    /// <summary>Field number for the "upstream_local_address" field.</summary>
    public const int UpstreamLocalAddressFieldNumber = 14;
    private global::Envoy.Api.V2.Core.Address upstreamLocalAddress_;
    /// <summary>
    /// The upstream local/origin address that handles this exchange. This does not include retries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Address UpstreamLocalAddress {
      get { return upstreamLocalAddress_; }
      set {
        upstreamLocalAddress_ = value;
      }
    }

    /// <summary>Field number for the "upstream_cluster" field.</summary>
    public const int UpstreamClusterFieldNumber = 15;
    private string upstreamCluster_ = "";
    /// <summary>
    /// The upstream cluster that *upstream_remote_address* belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpstreamCluster {
      get { return upstreamCluster_; }
      set {
        upstreamCluster_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response_flags" field.</summary>
    public const int ResponseFlagsFieldNumber = 16;
    private global::Envoy.Config.Filter.Accesslog.V2.ResponseFlags responseFlags_;
    /// <summary>
    /// Flags indicating occurences during request/response processing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.ResponseFlags ResponseFlags {
      get { return responseFlags_; }
      set {
        responseFlags_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 17;
    private global::Envoy.Api.V2.Core.Metadata metadata_;
    /// <summary>
    /// All metadata encountered during request processing, including endpoint
    /// selection.
    ///
    /// This can be used to associate IDs attached to the various configurations
    /// used to process this request with the access log entry. For example, a
    /// route created from a higher level forwarding rule with some ID can place
    /// that ID in this field and cross reference later. It can also be used to
    /// determine if a canary endpoint was used or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogCommon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogCommon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SampleRate != other.SampleRate) return false;
      if (!object.Equals(DownstreamRemoteAddress, other.DownstreamRemoteAddress)) return false;
      if (!object.Equals(DownstreamLocalAddress, other.DownstreamLocalAddress)) return false;
      if (!object.Equals(TlsProperties, other.TlsProperties)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(TimeToLastRxByte, other.TimeToLastRxByte)) return false;
      if (!object.Equals(TimeToFirstUpstreamTxByte, other.TimeToFirstUpstreamTxByte)) return false;
      if (!object.Equals(TimeToLastUpstreamTxByte, other.TimeToLastUpstreamTxByte)) return false;
      if (!object.Equals(TimeToFirstUpstreamRxByte, other.TimeToFirstUpstreamRxByte)) return false;
      if (!object.Equals(TimeToLastUpstreamRxByte, other.TimeToLastUpstreamRxByte)) return false;
      if (!object.Equals(TimeToFirstDownstreamTxByte, other.TimeToFirstDownstreamTxByte)) return false;
      if (!object.Equals(TimeToLastDownstreamTxByte, other.TimeToLastDownstreamTxByte)) return false;
      if (!object.Equals(UpstreamRemoteAddress, other.UpstreamRemoteAddress)) return false;
      if (!object.Equals(UpstreamLocalAddress, other.UpstreamLocalAddress)) return false;
      if (UpstreamCluster != other.UpstreamCluster) return false;
      if (!object.Equals(ResponseFlags, other.ResponseFlags)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SampleRate != 0D) hash ^= SampleRate.GetHashCode();
      if (downstreamRemoteAddress_ != null) hash ^= DownstreamRemoteAddress.GetHashCode();
      if (downstreamLocalAddress_ != null) hash ^= DownstreamLocalAddress.GetHashCode();
      if (tlsProperties_ != null) hash ^= TlsProperties.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (timeToLastRxByte_ != null) hash ^= TimeToLastRxByte.GetHashCode();
      if (timeToFirstUpstreamTxByte_ != null) hash ^= TimeToFirstUpstreamTxByte.GetHashCode();
      if (timeToLastUpstreamTxByte_ != null) hash ^= TimeToLastUpstreamTxByte.GetHashCode();
      if (timeToFirstUpstreamRxByte_ != null) hash ^= TimeToFirstUpstreamRxByte.GetHashCode();
      if (timeToLastUpstreamRxByte_ != null) hash ^= TimeToLastUpstreamRxByte.GetHashCode();
      if (timeToFirstDownstreamTxByte_ != null) hash ^= TimeToFirstDownstreamTxByte.GetHashCode();
      if (timeToLastDownstreamTxByte_ != null) hash ^= TimeToLastDownstreamTxByte.GetHashCode();
      if (upstreamRemoteAddress_ != null) hash ^= UpstreamRemoteAddress.GetHashCode();
      if (upstreamLocalAddress_ != null) hash ^= UpstreamLocalAddress.GetHashCode();
      if (UpstreamCluster.Length != 0) hash ^= UpstreamCluster.GetHashCode();
      if (responseFlags_ != null) hash ^= ResponseFlags.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SampleRate != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(SampleRate);
      }
      if (downstreamRemoteAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DownstreamRemoteAddress);
      }
      if (downstreamLocalAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DownstreamLocalAddress);
      }
      if (tlsProperties_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TlsProperties);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (timeToLastRxByte_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TimeToLastRxByte);
      }
      if (timeToFirstUpstreamTxByte_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(TimeToFirstUpstreamTxByte);
      }
      if (timeToLastUpstreamTxByte_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TimeToLastUpstreamTxByte);
      }
      if (timeToFirstUpstreamRxByte_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TimeToFirstUpstreamRxByte);
      }
      if (timeToLastUpstreamRxByte_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TimeToLastUpstreamRxByte);
      }
      if (timeToFirstDownstreamTxByte_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(TimeToFirstDownstreamTxByte);
      }
      if (timeToLastDownstreamTxByte_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TimeToLastDownstreamTxByte);
      }
      if (upstreamRemoteAddress_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(UpstreamRemoteAddress);
      }
      if (upstreamLocalAddress_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(UpstreamLocalAddress);
      }
      if (UpstreamCluster.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(UpstreamCluster);
      }
      if (responseFlags_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ResponseFlags);
      }
      if (metadata_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SampleRate != 0D) {
        size += 1 + 8;
      }
      if (downstreamRemoteAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownstreamRemoteAddress);
      }
      if (downstreamLocalAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownstreamLocalAddress);
      }
      if (tlsProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TlsProperties);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (timeToLastRxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToLastRxByte);
      }
      if (timeToFirstUpstreamTxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToFirstUpstreamTxByte);
      }
      if (timeToLastUpstreamTxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToLastUpstreamTxByte);
      }
      if (timeToFirstUpstreamRxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToFirstUpstreamRxByte);
      }
      if (timeToLastUpstreamRxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToLastUpstreamRxByte);
      }
      if (timeToFirstDownstreamTxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToFirstDownstreamTxByte);
      }
      if (timeToLastDownstreamTxByte_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeToLastDownstreamTxByte);
      }
      if (upstreamRemoteAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpstreamRemoteAddress);
      }
      if (upstreamLocalAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpstreamLocalAddress);
      }
      if (UpstreamCluster.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpstreamCluster);
      }
      if (responseFlags_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ResponseFlags);
      }
      if (metadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogCommon other) {
      if (other == null) {
        return;
      }
      if (other.SampleRate != 0D) {
        SampleRate = other.SampleRate;
      }
      if (other.downstreamRemoteAddress_ != null) {
        if (downstreamRemoteAddress_ == null) {
          downstreamRemoteAddress_ = new global::Envoy.Api.V2.Core.Address();
        }
        DownstreamRemoteAddress.MergeFrom(other.DownstreamRemoteAddress);
      }
      if (other.downstreamLocalAddress_ != null) {
        if (downstreamLocalAddress_ == null) {
          downstreamLocalAddress_ = new global::Envoy.Api.V2.Core.Address();
        }
        DownstreamLocalAddress.MergeFrom(other.DownstreamLocalAddress);
      }
      if (other.tlsProperties_ != null) {
        if (tlsProperties_ == null) {
          tlsProperties_ = new global::Envoy.Config.Filter.Accesslog.V2.TLSProperties();
        }
        TlsProperties.MergeFrom(other.TlsProperties);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.timeToLastRxByte_ != null) {
        if (timeToLastRxByte_ == null) {
          timeToLastRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToLastRxByte.MergeFrom(other.TimeToLastRxByte);
      }
      if (other.timeToFirstUpstreamTxByte_ != null) {
        if (timeToFirstUpstreamTxByte_ == null) {
          timeToFirstUpstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToFirstUpstreamTxByte.MergeFrom(other.TimeToFirstUpstreamTxByte);
      }
      if (other.timeToLastUpstreamTxByte_ != null) {
        if (timeToLastUpstreamTxByte_ == null) {
          timeToLastUpstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToLastUpstreamTxByte.MergeFrom(other.TimeToLastUpstreamTxByte);
      }
      if (other.timeToFirstUpstreamRxByte_ != null) {
        if (timeToFirstUpstreamRxByte_ == null) {
          timeToFirstUpstreamRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToFirstUpstreamRxByte.MergeFrom(other.TimeToFirstUpstreamRxByte);
      }
      if (other.timeToLastUpstreamRxByte_ != null) {
        if (timeToLastUpstreamRxByte_ == null) {
          timeToLastUpstreamRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToLastUpstreamRxByte.MergeFrom(other.TimeToLastUpstreamRxByte);
      }
      if (other.timeToFirstDownstreamTxByte_ != null) {
        if (timeToFirstDownstreamTxByte_ == null) {
          timeToFirstDownstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToFirstDownstreamTxByte.MergeFrom(other.TimeToFirstDownstreamTxByte);
      }
      if (other.timeToLastDownstreamTxByte_ != null) {
        if (timeToLastDownstreamTxByte_ == null) {
          timeToLastDownstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        TimeToLastDownstreamTxByte.MergeFrom(other.TimeToLastDownstreamTxByte);
      }
      if (other.upstreamRemoteAddress_ != null) {
        if (upstreamRemoteAddress_ == null) {
          upstreamRemoteAddress_ = new global::Envoy.Api.V2.Core.Address();
        }
        UpstreamRemoteAddress.MergeFrom(other.UpstreamRemoteAddress);
      }
      if (other.upstreamLocalAddress_ != null) {
        if (upstreamLocalAddress_ == null) {
          upstreamLocalAddress_ = new global::Envoy.Api.V2.Core.Address();
        }
        UpstreamLocalAddress.MergeFrom(other.UpstreamLocalAddress);
      }
      if (other.UpstreamCluster.Length != 0) {
        UpstreamCluster = other.UpstreamCluster;
      }
      if (other.responseFlags_ != null) {
        if (responseFlags_ == null) {
          responseFlags_ = new global::Envoy.Config.Filter.Accesslog.V2.ResponseFlags();
        }
        ResponseFlags.MergeFrom(other.ResponseFlags);
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Envoy.Api.V2.Core.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            SampleRate = input.ReadDouble();
            break;
          }
          case 18: {
            if (downstreamRemoteAddress_ == null) {
              downstreamRemoteAddress_ = new global::Envoy.Api.V2.Core.Address();
            }
            input.ReadMessage(downstreamRemoteAddress_);
            break;
          }
          case 26: {
            if (downstreamLocalAddress_ == null) {
              downstreamLocalAddress_ = new global::Envoy.Api.V2.Core.Address();
            }
            input.ReadMessage(downstreamLocalAddress_);
            break;
          }
          case 34: {
            if (tlsProperties_ == null) {
              tlsProperties_ = new global::Envoy.Config.Filter.Accesslog.V2.TLSProperties();
            }
            input.ReadMessage(tlsProperties_);
            break;
          }
          case 42: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 50: {
            if (timeToLastRxByte_ == null) {
              timeToLastRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToLastRxByte_);
            break;
          }
          case 58: {
            if (timeToFirstUpstreamTxByte_ == null) {
              timeToFirstUpstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToFirstUpstreamTxByte_);
            break;
          }
          case 66: {
            if (timeToLastUpstreamTxByte_ == null) {
              timeToLastUpstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToLastUpstreamTxByte_);
            break;
          }
          case 74: {
            if (timeToFirstUpstreamRxByte_ == null) {
              timeToFirstUpstreamRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToFirstUpstreamRxByte_);
            break;
          }
          case 82: {
            if (timeToLastUpstreamRxByte_ == null) {
              timeToLastUpstreamRxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToLastUpstreamRxByte_);
            break;
          }
          case 90: {
            if (timeToFirstDownstreamTxByte_ == null) {
              timeToFirstDownstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToFirstDownstreamTxByte_);
            break;
          }
          case 98: {
            if (timeToLastDownstreamTxByte_ == null) {
              timeToLastDownstreamTxByte_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(timeToLastDownstreamTxByte_);
            break;
          }
          case 106: {
            if (upstreamRemoteAddress_ == null) {
              upstreamRemoteAddress_ = new global::Envoy.Api.V2.Core.Address();
            }
            input.ReadMessage(upstreamRemoteAddress_);
            break;
          }
          case 114: {
            if (upstreamLocalAddress_ == null) {
              upstreamLocalAddress_ = new global::Envoy.Api.V2.Core.Address();
            }
            input.ReadMessage(upstreamLocalAddress_);
            break;
          }
          case 122: {
            UpstreamCluster = input.ReadString();
            break;
          }
          case 130: {
            if (responseFlags_ == null) {
              responseFlags_ = new global::Envoy.Config.Filter.Accesslog.V2.ResponseFlags();
            }
            input.ReadMessage(responseFlags_);
            break;
          }
          case 138: {
            if (metadata_ == null) {
              metadata_ = new global::Envoy.Api.V2.Core.Metadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
  /// Flags indicating occurences during request/response processing.
  /// </summary>
  public sealed partial class ResponseFlags : pb::IMessage<ResponseFlags> {
    private static readonly pb::MessageParser<ResponseFlags> _parser = new pb::MessageParser<ResponseFlags>(() => new ResponseFlags());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseFlags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseFlags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseFlags(ResponseFlags other) : this() {
      failedLocalHealthcheck_ = other.failedLocalHealthcheck_;
      noHealthyUpstream_ = other.noHealthyUpstream_;
      upstreamRequestTimeout_ = other.upstreamRequestTimeout_;
      localReset_ = other.localReset_;
      upstreamRemoteReset_ = other.upstreamRemoteReset_;
      upstreamConnectionFailure_ = other.upstreamConnectionFailure_;
      upstreamConnectionTermination_ = other.upstreamConnectionTermination_;
      upstreamOverflow_ = other.upstreamOverflow_;
      noRouteFound_ = other.noRouteFound_;
      delayInjected_ = other.delayInjected_;
      faultInjected_ = other.faultInjected_;
      rateLimited_ = other.rateLimited_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseFlags Clone() {
      return new ResponseFlags(this);
    }

    /// <summary>Field number for the "failed_local_healthcheck" field.</summary>
    public const int FailedLocalHealthcheckFieldNumber = 1;
    private bool failedLocalHealthcheck_;
    /// <summary>
    /// Indicates local server healthcheck failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FailedLocalHealthcheck {
      get { return failedLocalHealthcheck_; }
      set {
        failedLocalHealthcheck_ = value;
      }
    }

    /// <summary>Field number for the "no_healthy_upstream" field.</summary>
    public const int NoHealthyUpstreamFieldNumber = 2;
    private bool noHealthyUpstream_;
    /// <summary>
    /// Indicates there was no healthy upstream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoHealthyUpstream {
      get { return noHealthyUpstream_; }
      set {
        noHealthyUpstream_ = value;
      }
    }

    /// <summary>Field number for the "upstream_request_timeout" field.</summary>
    public const int UpstreamRequestTimeoutFieldNumber = 3;
    private bool upstreamRequestTimeout_;
    /// <summary>
    /// Indicates an there was an upstream request timeout.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpstreamRequestTimeout {
      get { return upstreamRequestTimeout_; }
      set {
        upstreamRequestTimeout_ = value;
      }
    }

    /// <summary>Field number for the "local_reset" field.</summary>
    public const int LocalResetFieldNumber = 4;
    private bool localReset_;
    /// <summary>
    /// Indicates local codec level reset was sent on the stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LocalReset {
      get { return localReset_; }
      set {
        localReset_ = value;
      }
    }

    /// <summary>Field number for the "upstream_remote_reset" field.</summary>
    public const int UpstreamRemoteResetFieldNumber = 5;
    private bool upstreamRemoteReset_;
    /// <summary>
    /// Indicates remote codec level reset was received on the stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpstreamRemoteReset {
      get { return upstreamRemoteReset_; }
      set {
        upstreamRemoteReset_ = value;
      }
    }

    /// <summary>Field number for the "upstream_connection_failure" field.</summary>
    public const int UpstreamConnectionFailureFieldNumber = 6;
    private bool upstreamConnectionFailure_;
    /// <summary>
    /// Indicates there was a local reset by a connection pool due to an initial connection failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpstreamConnectionFailure {
      get { return upstreamConnectionFailure_; }
      set {
        upstreamConnectionFailure_ = value;
      }
    }

    /// <summary>Field number for the "upstream_connection_termination" field.</summary>
    public const int UpstreamConnectionTerminationFieldNumber = 7;
    private bool upstreamConnectionTermination_;
    /// <summary>
    /// Indicates the stream was reset locally due to connection termination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpstreamConnectionTermination {
      get { return upstreamConnectionTermination_; }
      set {
        upstreamConnectionTermination_ = value;
      }
    }

    /// <summary>Field number for the "upstream_overflow" field.</summary>
    public const int UpstreamOverflowFieldNumber = 8;
    private bool upstreamOverflow_;
    /// <summary>
    /// Indicates the stream was reset because of a resource overflow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpstreamOverflow {
      get { return upstreamOverflow_; }
      set {
        upstreamOverflow_ = value;
      }
    }

    /// <summary>Field number for the "no_route_found" field.</summary>
    public const int NoRouteFoundFieldNumber = 9;
    private bool noRouteFound_;
    /// <summary>
    /// Indicates no route was found for the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoRouteFound {
      get { return noRouteFound_; }
      set {
        noRouteFound_ = value;
      }
    }

    /// <summary>Field number for the "delay_injected" field.</summary>
    public const int DelayInjectedFieldNumber = 10;
    private bool delayInjected_;
    /// <summary>
    /// Indicates that the request was delayed before proxying.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DelayInjected {
      get { return delayInjected_; }
      set {
        delayInjected_ = value;
      }
    }

    /// <summary>Field number for the "fault_injected" field.</summary>
    public const int FaultInjectedFieldNumber = 11;
    private bool faultInjected_;
    /// <summary>
    /// Indicates that the request was aborted with an injected error code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FaultInjected {
      get { return faultInjected_; }
      set {
        faultInjected_ = value;
      }
    }

    /// <summary>Field number for the "rate_limited" field.</summary>
    public const int RateLimitedFieldNumber = 12;
    private bool rateLimited_;
    /// <summary>
    /// Indicates that the request was rate-limited locally.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RateLimited {
      get { return rateLimited_; }
      set {
        rateLimited_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseFlags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseFlags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FailedLocalHealthcheck != other.FailedLocalHealthcheck) return false;
      if (NoHealthyUpstream != other.NoHealthyUpstream) return false;
      if (UpstreamRequestTimeout != other.UpstreamRequestTimeout) return false;
      if (LocalReset != other.LocalReset) return false;
      if (UpstreamRemoteReset != other.UpstreamRemoteReset) return false;
      if (UpstreamConnectionFailure != other.UpstreamConnectionFailure) return false;
      if (UpstreamConnectionTermination != other.UpstreamConnectionTermination) return false;
      if (UpstreamOverflow != other.UpstreamOverflow) return false;
      if (NoRouteFound != other.NoRouteFound) return false;
      if (DelayInjected != other.DelayInjected) return false;
      if (FaultInjected != other.FaultInjected) return false;
      if (RateLimited != other.RateLimited) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FailedLocalHealthcheck != false) hash ^= FailedLocalHealthcheck.GetHashCode();
      if (NoHealthyUpstream != false) hash ^= NoHealthyUpstream.GetHashCode();
      if (UpstreamRequestTimeout != false) hash ^= UpstreamRequestTimeout.GetHashCode();
      if (LocalReset != false) hash ^= LocalReset.GetHashCode();
      if (UpstreamRemoteReset != false) hash ^= UpstreamRemoteReset.GetHashCode();
      if (UpstreamConnectionFailure != false) hash ^= UpstreamConnectionFailure.GetHashCode();
      if (UpstreamConnectionTermination != false) hash ^= UpstreamConnectionTermination.GetHashCode();
      if (UpstreamOverflow != false) hash ^= UpstreamOverflow.GetHashCode();
      if (NoRouteFound != false) hash ^= NoRouteFound.GetHashCode();
      if (DelayInjected != false) hash ^= DelayInjected.GetHashCode();
      if (FaultInjected != false) hash ^= FaultInjected.GetHashCode();
      if (RateLimited != false) hash ^= RateLimited.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FailedLocalHealthcheck != false) {
        output.WriteRawTag(8);
        output.WriteBool(FailedLocalHealthcheck);
      }
      if (NoHealthyUpstream != false) {
        output.WriteRawTag(16);
        output.WriteBool(NoHealthyUpstream);
      }
      if (UpstreamRequestTimeout != false) {
        output.WriteRawTag(24);
        output.WriteBool(UpstreamRequestTimeout);
      }
      if (LocalReset != false) {
        output.WriteRawTag(32);
        output.WriteBool(LocalReset);
      }
      if (UpstreamRemoteReset != false) {
        output.WriteRawTag(40);
        output.WriteBool(UpstreamRemoteReset);
      }
      if (UpstreamConnectionFailure != false) {
        output.WriteRawTag(48);
        output.WriteBool(UpstreamConnectionFailure);
      }
      if (UpstreamConnectionTermination != false) {
        output.WriteRawTag(56);
        output.WriteBool(UpstreamConnectionTermination);
      }
      if (UpstreamOverflow != false) {
        output.WriteRawTag(64);
        output.WriteBool(UpstreamOverflow);
      }
      if (NoRouteFound != false) {
        output.WriteRawTag(72);
        output.WriteBool(NoRouteFound);
      }
      if (DelayInjected != false) {
        output.WriteRawTag(80);
        output.WriteBool(DelayInjected);
      }
      if (FaultInjected != false) {
        output.WriteRawTag(88);
        output.WriteBool(FaultInjected);
      }
      if (RateLimited != false) {
        output.WriteRawTag(96);
        output.WriteBool(RateLimited);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FailedLocalHealthcheck != false) {
        size += 1 + 1;
      }
      if (NoHealthyUpstream != false) {
        size += 1 + 1;
      }
      if (UpstreamRequestTimeout != false) {
        size += 1 + 1;
      }
      if (LocalReset != false) {
        size += 1 + 1;
      }
      if (UpstreamRemoteReset != false) {
        size += 1 + 1;
      }
      if (UpstreamConnectionFailure != false) {
        size += 1 + 1;
      }
      if (UpstreamConnectionTermination != false) {
        size += 1 + 1;
      }
      if (UpstreamOverflow != false) {
        size += 1 + 1;
      }
      if (NoRouteFound != false) {
        size += 1 + 1;
      }
      if (DelayInjected != false) {
        size += 1 + 1;
      }
      if (FaultInjected != false) {
        size += 1 + 1;
      }
      if (RateLimited != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseFlags other) {
      if (other == null) {
        return;
      }
      if (other.FailedLocalHealthcheck != false) {
        FailedLocalHealthcheck = other.FailedLocalHealthcheck;
      }
      if (other.NoHealthyUpstream != false) {
        NoHealthyUpstream = other.NoHealthyUpstream;
      }
      if (other.UpstreamRequestTimeout != false) {
        UpstreamRequestTimeout = other.UpstreamRequestTimeout;
      }
      if (other.LocalReset != false) {
        LocalReset = other.LocalReset;
      }
      if (other.UpstreamRemoteReset != false) {
        UpstreamRemoteReset = other.UpstreamRemoteReset;
      }
      if (other.UpstreamConnectionFailure != false) {
        UpstreamConnectionFailure = other.UpstreamConnectionFailure;
      }
      if (other.UpstreamConnectionTermination != false) {
        UpstreamConnectionTermination = other.UpstreamConnectionTermination;
      }
      if (other.UpstreamOverflow != false) {
        UpstreamOverflow = other.UpstreamOverflow;
      }
      if (other.NoRouteFound != false) {
        NoRouteFound = other.NoRouteFound;
      }
      if (other.DelayInjected != false) {
        DelayInjected = other.DelayInjected;
      }
      if (other.FaultInjected != false) {
        FaultInjected = other.FaultInjected;
      }
      if (other.RateLimited != false) {
        RateLimited = other.RateLimited;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FailedLocalHealthcheck = input.ReadBool();
            break;
          }
          case 16: {
            NoHealthyUpstream = input.ReadBool();
            break;
          }
          case 24: {
            UpstreamRequestTimeout = input.ReadBool();
            break;
          }
          case 32: {
            LocalReset = input.ReadBool();
            break;
          }
          case 40: {
            UpstreamRemoteReset = input.ReadBool();
            break;
          }
          case 48: {
            UpstreamConnectionFailure = input.ReadBool();
            break;
          }
          case 56: {
            UpstreamConnectionTermination = input.ReadBool();
            break;
          }
          case 64: {
            UpstreamOverflow = input.ReadBool();
            break;
          }
          case 72: {
            NoRouteFound = input.ReadBool();
            break;
          }
          case 80: {
            DelayInjected = input.ReadBool();
            break;
          }
          case 88: {
            FaultInjected = input.ReadBool();
            break;
          }
          case 96: {
            RateLimited = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
  /// Properties of a negotiated TLS connection.
  /// </summary>
  public sealed partial class TLSProperties : pb::IMessage<TLSProperties> {
    private static readonly pb::MessageParser<TLSProperties> _parser = new pb::MessageParser<TLSProperties>(() => new TLSProperties());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TLSProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLSProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLSProperties(TLSProperties other) : this() {
      tlsVersion_ = other.tlsVersion_;
      TlsCipherSuite = other.TlsCipherSuite;
      tlsSniHostname_ = other.tlsSniHostname_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TLSProperties Clone() {
      return new TLSProperties(this);
    }

    /// <summary>Field number for the "tls_version" field.</summary>
    public const int TlsVersionFieldNumber = 1;
    private global::Envoy.Config.Filter.Accesslog.V2.TLSProperties.Types.TLSVersion tlsVersion_ = 0;
    /// <summary>
    /// Version of TLS that was negotiated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.TLSProperties.Types.TLSVersion TlsVersion {
      get { return tlsVersion_; }
      set {
        tlsVersion_ = value;
      }
    }

    /// <summary>Field number for the "tls_cipher_suite" field.</summary>
    public const int TlsCipherSuiteFieldNumber = 2;
    private static readonly pb::FieldCodec<uint?> _single_tlsCipherSuite_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
    private uint? tlsCipherSuite_;
    /// <summary>
    /// TLS cipher suite negotiated during handshake. The value is a
    /// four-digit hex code defined by the IANA TLS Cipher Suite Registry
    /// (e.g. ``009C`` for ``TLS_RSA_WITH_AES_128_GCM_SHA256``).
    ///
    /// Here it is expressed as an integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? TlsCipherSuite {
      get { return tlsCipherSuite_; }
      set {
        tlsCipherSuite_ = value;
      }
    }

    /// <summary>Field number for the "tls_sni_hostname" field.</summary>
    public const int TlsSniHostnameFieldNumber = 3;
    private string tlsSniHostname_ = "";
    /// <summary>
    /// SNI hostname from handshake.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TlsSniHostname {
      get { return tlsSniHostname_; }
      set {
        tlsSniHostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TLSProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TLSProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TlsVersion != other.TlsVersion) return false;
      if (TlsCipherSuite != other.TlsCipherSuite) return false;
      if (TlsSniHostname != other.TlsSniHostname) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TlsVersion != 0) hash ^= TlsVersion.GetHashCode();
      if (tlsCipherSuite_ != null) hash ^= TlsCipherSuite.GetHashCode();
      if (TlsSniHostname.Length != 0) hash ^= TlsSniHostname.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TlsVersion != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TlsVersion);
      }
      if (tlsCipherSuite_ != null) {
        _single_tlsCipherSuite_codec.WriteTagAndValue(output, TlsCipherSuite);
      }
      if (TlsSniHostname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TlsSniHostname);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TlsVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TlsVersion);
      }
      if (tlsCipherSuite_ != null) {
        size += _single_tlsCipherSuite_codec.CalculateSizeWithTag(TlsCipherSuite);
      }
      if (TlsSniHostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TlsSniHostname);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TLSProperties other) {
      if (other == null) {
        return;
      }
      if (other.TlsVersion != 0) {
        TlsVersion = other.TlsVersion;
      }
      if (other.tlsCipherSuite_ != null) {
        if (tlsCipherSuite_ == null || other.TlsCipherSuite != 0) {
          TlsCipherSuite = other.TlsCipherSuite;
        }
      }
      if (other.TlsSniHostname.Length != 0) {
        TlsSniHostname = other.TlsSniHostname;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            tlsVersion_ = (global::Envoy.Config.Filter.Accesslog.V2.TLSProperties.Types.TLSVersion) input.ReadEnum();
            break;
          }
          case 18: {
            uint? value = _single_tlsCipherSuite_codec.Read(input);
            if (tlsCipherSuite_ == null || value != 0) {
              TlsCipherSuite = value;
            }
            break;
          }
          case 26: {
            TlsSniHostname = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TLSProperties message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TLSVersion {
        [pbr::OriginalName("VERSION_UNSPECIFIED")] VersionUnspecified = 0,
        [pbr::OriginalName("TLSv1")] Tlsv1 = 1,
        [pbr::OriginalName("TLSv1_1")] Tlsv11 = 2,
        [pbr::OriginalName("TLSv1_2")] Tlsv12 = 3,
        [pbr::OriginalName("TLSv1_3")] Tlsv13 = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
  /// </summary>
  public sealed partial class TCPAccessLogEntry : pb::IMessage<TCPAccessLogEntry> {
    private static readonly pb::MessageParser<TCPAccessLogEntry> _parser = new pb::MessageParser<TCPAccessLogEntry>(() => new TCPAccessLogEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TCPAccessLogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPAccessLogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPAccessLogEntry(TCPAccessLogEntry other) : this() {
      CommonProperties = other.commonProperties_ != null ? other.CommonProperties.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPAccessLogEntry Clone() {
      return new TCPAccessLogEntry(this);
    }

    /// <summary>Field number for the "common_properties" field.</summary>
    public const int CommonPropertiesFieldNumber = 1;
    private global::Envoy.Config.Filter.Accesslog.V2.AccessLogCommon commonProperties_;
    /// <summary>
    /// Common properties shared by all Envoy access logs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.AccessLogCommon CommonProperties {
      get { return commonProperties_; }
      set {
        commonProperties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TCPAccessLogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TCPAccessLogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonProperties, other.CommonProperties)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commonProperties_ != null) hash ^= CommonProperties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commonProperties_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonProperties);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commonProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonProperties);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TCPAccessLogEntry other) {
      if (other == null) {
        return;
      }
      if (other.commonProperties_ != null) {
        if (commonProperties_ == null) {
          commonProperties_ = new global::Envoy.Config.Filter.Accesslog.V2.AccessLogCommon();
        }
        CommonProperties.MergeFrom(other.CommonProperties);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (commonProperties_ == null) {
              commonProperties_ = new global::Envoy.Config.Filter.Accesslog.V2.AccessLogCommon();
            }
            input.ReadMessage(commonProperties_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
  /// </summary>
  public sealed partial class HTTPRequestProperties : pb::IMessage<HTTPRequestProperties> {
    private static readonly pb::MessageParser<HTTPRequestProperties> _parser = new pb::MessageParser<HTTPRequestProperties>(() => new HTTPRequestProperties());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTTPRequestProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRequestProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRequestProperties(HTTPRequestProperties other) : this() {
      requestMethod_ = other.requestMethod_;
      scheme_ = other.scheme_;
      authority_ = other.authority_;
      Port = other.Port;
      path_ = other.path_;
      userAgent_ = other.userAgent_;
      referer_ = other.referer_;
      forwardedFor_ = other.forwardedFor_;
      requestId_ = other.requestId_;
      originalPath_ = other.originalPath_;
      requestHeadersBytes_ = other.requestHeadersBytes_;
      requestBodyBytes_ = other.requestBodyBytes_;
      requestHeaders_ = other.requestHeaders_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPRequestProperties Clone() {
      return new HTTPRequestProperties(this);
    }

    /// <summary>Field number for the "request_method" field.</summary>
    public const int RequestMethodFieldNumber = 1;
    private global::Envoy.Api.V2.Core.RequestMethod requestMethod_ = 0;
    /// <summary>
    /// The request method (RFC 7231/2616).
    /// [#comment:TODO(htuch): add (validate.rules).enum.defined_only = true once
    /// https://github.com/lyft/protoc-gen-validate/issues/42 is resolved.]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.RequestMethod RequestMethod {
      get { return requestMethod_; }
      set {
        requestMethod_ = value;
      }
    }

    /// <summary>Field number for the "scheme" field.</summary>
    public const int SchemeFieldNumber = 2;
    private string scheme_ = "";
    /// <summary>
    /// The scheme portion of the incoming request URI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scheme {
      get { return scheme_; }
      set {
        scheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authority" field.</summary>
    public const int AuthorityFieldNumber = 3;
    private string authority_ = "";
    /// <summary>
    /// HTTP/2 ``:authority`` or HTTP/1.1 ``Host`` header value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Authority {
      get { return authority_; }
      set {
        authority_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private static readonly pb::FieldCodec<uint?> _single_port_codec = pb::FieldCodec.ForStructWrapper<uint>(34);
    private uint? port_;
    /// <summary>
    /// The port of the incoming request URI
    /// (unused currently, as port is composed onto authority).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 5;
    private string path_ = "";
    /// <summary>
    /// The path portion from the incoming request URI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_agent" field.</summary>
    public const int UserAgentFieldNumber = 6;
    private string userAgent_ = "";
    /// <summary>
    /// Value of the ``User-Agent`` request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAgent {
      get { return userAgent_; }
      set {
        userAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "referer" field.</summary>
    public const int RefererFieldNumber = 7;
    private string referer_ = "";
    /// <summary>
    /// Value of the ``Referer`` request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Referer {
      get { return referer_; }
      set {
        referer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "forwarded_for" field.</summary>
    public const int ForwardedForFieldNumber = 8;
    private string forwardedFor_ = "";
    /// <summary>
    /// Value of the ``X-Forwarded-For`` request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ForwardedFor {
      get { return forwardedFor_; }
      set {
        forwardedFor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 9;
    private string requestId_ = "";
    /// <summary>
    /// Value of the ``X-Request-Id`` request header
    ///
    /// This header is used by Envoy to uniquely identify a request.
    /// It will be generated for all external requests and internal requests that
    /// do not already have a request ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "original_path" field.</summary>
    public const int OriginalPathFieldNumber = 10;
    private string originalPath_ = "";
    /// <summary>
    /// Value of the ``X-Envoy-Original-Path`` request header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalPath {
      get { return originalPath_; }
      set {
        originalPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_headers_bytes" field.</summary>
    public const int RequestHeadersBytesFieldNumber = 11;
    private ulong requestHeadersBytes_;
    /// <summary>
    /// Size of the HTTP request headers in bytes.
    ///
    /// This value is captured from the OSI layer 7 perspective, i.e. it does not
    /// include overhead from framing or encoding at other networking layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestHeadersBytes {
      get { return requestHeadersBytes_; }
      set {
        requestHeadersBytes_ = value;
      }
    }

    /// <summary>Field number for the "request_body_bytes" field.</summary>
    public const int RequestBodyBytesFieldNumber = 12;
    private ulong requestBodyBytes_;
    /// <summary>
    /// Size of the HTTP request body in bytes.
    ///
    /// This value is captured from the OSI layer 7 perspective, i.e. it does not
    /// include overhead from framing or encoding at other networking layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RequestBodyBytes {
      get { return requestBodyBytes_; }
      set {
        requestBodyBytes_ = value;
      }
    }

    /// <summary>Field number for the "request_headers" field.</summary>
    public const int RequestHeadersFieldNumber = 13;
    private static readonly pbc::MapField<string, string>.Codec _map_requestHeaders_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 106);
    private readonly pbc::MapField<string, string> requestHeaders_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Map of additional headers that have been configured to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> RequestHeaders {
      get { return requestHeaders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTTPRequestProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTTPRequestProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestMethod != other.RequestMethod) return false;
      if (Scheme != other.Scheme) return false;
      if (Authority != other.Authority) return false;
      if (Port != other.Port) return false;
      if (Path != other.Path) return false;
      if (UserAgent != other.UserAgent) return false;
      if (Referer != other.Referer) return false;
      if (ForwardedFor != other.ForwardedFor) return false;
      if (RequestId != other.RequestId) return false;
      if (OriginalPath != other.OriginalPath) return false;
      if (RequestHeadersBytes != other.RequestHeadersBytes) return false;
      if (RequestBodyBytes != other.RequestBodyBytes) return false;
      if (!RequestHeaders.Equals(other.RequestHeaders)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestMethod != 0) hash ^= RequestMethod.GetHashCode();
      if (Scheme.Length != 0) hash ^= Scheme.GetHashCode();
      if (Authority.Length != 0) hash ^= Authority.GetHashCode();
      if (port_ != null) hash ^= Port.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (UserAgent.Length != 0) hash ^= UserAgent.GetHashCode();
      if (Referer.Length != 0) hash ^= Referer.GetHashCode();
      if (ForwardedFor.Length != 0) hash ^= ForwardedFor.GetHashCode();
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (OriginalPath.Length != 0) hash ^= OriginalPath.GetHashCode();
      if (RequestHeadersBytes != 0UL) hash ^= RequestHeadersBytes.GetHashCode();
      if (RequestBodyBytes != 0UL) hash ^= RequestBodyBytes.GetHashCode();
      hash ^= RequestHeaders.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestMethod != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestMethod);
      }
      if (Scheme.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Scheme);
      }
      if (Authority.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Authority);
      }
      if (port_ != null) {
        _single_port_codec.WriteTagAndValue(output, Port);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Path);
      }
      if (UserAgent.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserAgent);
      }
      if (Referer.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Referer);
      }
      if (ForwardedFor.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ForwardedFor);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RequestId);
      }
      if (OriginalPath.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OriginalPath);
      }
      if (RequestHeadersBytes != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(RequestHeadersBytes);
      }
      if (RequestBodyBytes != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(RequestBodyBytes);
      }
      requestHeaders_.WriteTo(output, _map_requestHeaders_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestMethod);
      }
      if (Scheme.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scheme);
      }
      if (Authority.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Authority);
      }
      if (port_ != null) {
        size += _single_port_codec.CalculateSizeWithTag(Port);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (UserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
      }
      if (Referer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Referer);
      }
      if (ForwardedFor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ForwardedFor);
      }
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (OriginalPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalPath);
      }
      if (RequestHeadersBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestHeadersBytes);
      }
      if (RequestBodyBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestBodyBytes);
      }
      size += requestHeaders_.CalculateSize(_map_requestHeaders_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTTPRequestProperties other) {
      if (other == null) {
        return;
      }
      if (other.RequestMethod != 0) {
        RequestMethod = other.RequestMethod;
      }
      if (other.Scheme.Length != 0) {
        Scheme = other.Scheme;
      }
      if (other.Authority.Length != 0) {
        Authority = other.Authority;
      }
      if (other.port_ != null) {
        if (port_ == null || other.Port != 0) {
          Port = other.Port;
        }
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.UserAgent.Length != 0) {
        UserAgent = other.UserAgent;
      }
      if (other.Referer.Length != 0) {
        Referer = other.Referer;
      }
      if (other.ForwardedFor.Length != 0) {
        ForwardedFor = other.ForwardedFor;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      if (other.OriginalPath.Length != 0) {
        OriginalPath = other.OriginalPath;
      }
      if (other.RequestHeadersBytes != 0UL) {
        RequestHeadersBytes = other.RequestHeadersBytes;
      }
      if (other.RequestBodyBytes != 0UL) {
        RequestBodyBytes = other.RequestBodyBytes;
      }
      requestHeaders_.Add(other.requestHeaders_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            requestMethod_ = (global::Envoy.Api.V2.Core.RequestMethod) input.ReadEnum();
            break;
          }
          case 18: {
            Scheme = input.ReadString();
            break;
          }
          case 26: {
            Authority = input.ReadString();
            break;
          }
          case 34: {
            uint? value = _single_port_codec.Read(input);
            if (port_ == null || value != 0) {
              Port = value;
            }
            break;
          }
          case 42: {
            Path = input.ReadString();
            break;
          }
          case 50: {
            UserAgent = input.ReadString();
            break;
          }
          case 58: {
            Referer = input.ReadString();
            break;
          }
          case 66: {
            ForwardedFor = input.ReadString();
            break;
          }
          case 74: {
            RequestId = input.ReadString();
            break;
          }
          case 82: {
            OriginalPath = input.ReadString();
            break;
          }
          case 88: {
            RequestHeadersBytes = input.ReadUInt64();
            break;
          }
          case 96: {
            RequestBodyBytes = input.ReadUInt64();
            break;
          }
          case 106: {
            requestHeaders_.AddEntriesFrom(input, _map_requestHeaders_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
  /// </summary>
  public sealed partial class HTTPResponseProperties : pb::IMessage<HTTPResponseProperties> {
    private static readonly pb::MessageParser<HTTPResponseProperties> _parser = new pb::MessageParser<HTTPResponseProperties>(() => new HTTPResponseProperties());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTTPResponseProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPResponseProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPResponseProperties(HTTPResponseProperties other) : this() {
      ResponseCode = other.ResponseCode;
      responseHeadersBytes_ = other.responseHeadersBytes_;
      responseBodyBytes_ = other.responseBodyBytes_;
      responseHeaders_ = other.responseHeaders_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPResponseProperties Clone() {
      return new HTTPResponseProperties(this);
    }

    /// <summary>Field number for the "response_code" field.</summary>
    public const int ResponseCodeFieldNumber = 1;
    private static readonly pb::FieldCodec<uint?> _single_responseCode_codec = pb::FieldCodec.ForStructWrapper<uint>(10);
    private uint? responseCode_;
    /// <summary>
    /// The HTTP response code returned by Envoy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? ResponseCode {
      get { return responseCode_; }
      set {
        responseCode_ = value;
      }
    }

    /// <summary>Field number for the "response_headers_bytes" field.</summary>
    public const int ResponseHeadersBytesFieldNumber = 2;
    private ulong responseHeadersBytes_;
    /// <summary>
    /// Size of the HTTP response headers in bytes.
    ///
    /// This value is captured from the OSI layer 7 perspective, i.e. it does not
    /// include overhead from framing or encoding at other networking layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ResponseHeadersBytes {
      get { return responseHeadersBytes_; }
      set {
        responseHeadersBytes_ = value;
      }
    }

    /// <summary>Field number for the "response_body_bytes" field.</summary>
    public const int ResponseBodyBytesFieldNumber = 3;
    private ulong responseBodyBytes_;
    /// <summary>
    /// Size of the HTTP response body in bytes.
    ///
    /// This value is captured from the OSI layer 7 perspective, i.e. it does not
    /// include overhead from framing or encoding at other networking layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ResponseBodyBytes {
      get { return responseBodyBytes_; }
      set {
        responseBodyBytes_ = value;
      }
    }

    /// <summary>Field number for the "response_headers" field.</summary>
    public const int ResponseHeadersFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_responseHeaders_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> responseHeaders_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Map of additional headers configured to be logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ResponseHeaders {
      get { return responseHeaders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTTPResponseProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTTPResponseProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResponseCode != other.ResponseCode) return false;
      if (ResponseHeadersBytes != other.ResponseHeadersBytes) return false;
      if (ResponseBodyBytes != other.ResponseBodyBytes) return false;
      if (!ResponseHeaders.Equals(other.ResponseHeaders)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCode_ != null) hash ^= ResponseCode.GetHashCode();
      if (ResponseHeadersBytes != 0UL) hash ^= ResponseHeadersBytes.GetHashCode();
      if (ResponseBodyBytes != 0UL) hash ^= ResponseBodyBytes.GetHashCode();
      hash ^= ResponseHeaders.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCode_ != null) {
        _single_responseCode_codec.WriteTagAndValue(output, ResponseCode);
      }
      if (ResponseHeadersBytes != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ResponseHeadersBytes);
      }
      if (ResponseBodyBytes != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ResponseBodyBytes);
      }
      responseHeaders_.WriteTo(output, _map_responseHeaders_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCode_ != null) {
        size += _single_responseCode_codec.CalculateSizeWithTag(ResponseCode);
      }
      if (ResponseHeadersBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ResponseHeadersBytes);
      }
      if (ResponseBodyBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ResponseBodyBytes);
      }
      size += responseHeaders_.CalculateSize(_map_responseHeaders_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTTPResponseProperties other) {
      if (other == null) {
        return;
      }
      if (other.responseCode_ != null) {
        if (responseCode_ == null || other.ResponseCode != 0) {
          ResponseCode = other.ResponseCode;
        }
      }
      if (other.ResponseHeadersBytes != 0UL) {
        ResponseHeadersBytes = other.ResponseHeadersBytes;
      }
      if (other.ResponseBodyBytes != 0UL) {
        ResponseBodyBytes = other.ResponseBodyBytes;
      }
      responseHeaders_.Add(other.responseHeaders_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            uint? value = _single_responseCode_codec.Read(input);
            if (responseCode_ == null || value != 0) {
              ResponseCode = value;
            }
            break;
          }
          case 16: {
            ResponseHeadersBytes = input.ReadUInt64();
            break;
          }
          case 24: {
            ResponseBodyBytes = input.ReadUInt64();
            break;
          }
          case 34: {
            responseHeaders_.AddEntriesFrom(input, _map_responseHeaders_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
  /// </summary>
  public sealed partial class HTTPAccessLogEntry : pb::IMessage<HTTPAccessLogEntry> {
    private static readonly pb::MessageParser<HTTPAccessLogEntry> _parser = new pb::MessageParser<HTTPAccessLogEntry>(() => new HTTPAccessLogEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTTPAccessLogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPAccessLogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPAccessLogEntry(HTTPAccessLogEntry other) : this() {
      CommonProperties = other.commonProperties_ != null ? other.CommonProperties.Clone() : null;
      protocolVersion_ = other.protocolVersion_;
      Request = other.request_ != null ? other.Request.Clone() : null;
      Response = other.response_ != null ? other.Response.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTTPAccessLogEntry Clone() {
      return new HTTPAccessLogEntry(this);
    }

    /// <summary>Field number for the "common_properties" field.</summary>
    public const int CommonPropertiesFieldNumber = 1;
    private global::Envoy.Config.Filter.Accesslog.V2.AccessLogCommon commonProperties_;
    /// <summary>
    /// Common properties shared by all Envoy access logs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.AccessLogCommon CommonProperties {
      get { return commonProperties_; }
      set {
        commonProperties_ = value;
      }
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 2;
    private global::Envoy.Config.Filter.Accesslog.V2.HTTPAccessLogEntry.Types.HTTPVersion protocolVersion_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.HTTPAccessLogEntry.Types.HTTPVersion ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 3;
    private global::Envoy.Config.Filter.Accesslog.V2.HTTPRequestProperties request_;
    /// <summary>
    /// Description of the incoming HTTP request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.HTTPRequestProperties Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 4;
    private global::Envoy.Config.Filter.Accesslog.V2.HTTPResponseProperties response_;
    /// <summary>
    /// Description of the outgoing HTTP response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.HTTPResponseProperties Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTTPAccessLogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTTPAccessLogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonProperties, other.CommonProperties)) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commonProperties_ != null) hash ^= CommonProperties.GetHashCode();
      if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commonProperties_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonProperties);
      }
      if (ProtocolVersion != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ProtocolVersion);
      }
      if (request_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commonProperties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonProperties);
      }
      if (ProtocolVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtocolVersion);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTTPAccessLogEntry other) {
      if (other == null) {
        return;
      }
      if (other.commonProperties_ != null) {
        if (commonProperties_ == null) {
          commonProperties_ = new global::Envoy.Config.Filter.Accesslog.V2.AccessLogCommon();
        }
        CommonProperties.MergeFrom(other.CommonProperties);
      }
      if (other.ProtocolVersion != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Envoy.Config.Filter.Accesslog.V2.HTTPRequestProperties();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          response_ = new global::Envoy.Config.Filter.Accesslog.V2.HTTPResponseProperties();
        }
        Response.MergeFrom(other.Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (commonProperties_ == null) {
              commonProperties_ = new global::Envoy.Config.Filter.Accesslog.V2.AccessLogCommon();
            }
            input.ReadMessage(commonProperties_);
            break;
          }
          case 16: {
            protocolVersion_ = (global::Envoy.Config.Filter.Accesslog.V2.HTTPAccessLogEntry.Types.HTTPVersion) input.ReadEnum();
            break;
          }
          case 26: {
            if (request_ == null) {
              request_ = new global::Envoy.Config.Filter.Accesslog.V2.HTTPRequestProperties();
            }
            input.ReadMessage(request_);
            break;
          }
          case 34: {
            if (response_ == null) {
              response_ = new global::Envoy.Config.Filter.Accesslog.V2.HTTPResponseProperties();
            }
            input.ReadMessage(response_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HTTPAccessLogEntry message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// HTTP version
      /// </summary>
      public enum HTTPVersion {
        [pbr::OriginalName("PROTOCOL_UNSPECIFIED")] ProtocolUnspecified = 0,
        [pbr::OriginalName("HTTP10")] Http10 = 1,
        [pbr::OriginalName("HTTP11")] Http11 = 2,
        [pbr::OriginalName("HTTP2")] Http2 = 3,
      }

    }
    #endregion

  }

  public sealed partial class AccessLog : pb::IMessage<AccessLog> {
    private static readonly pb::MessageParser<AccessLog> _parser = new pb::MessageParser<AccessLog>(() => new AccessLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLog(AccessLog other) : this() {
      name_ = other.name_;
      Filter = other.filter_ != null ? other.Filter.Clone() : null;
      Config = other.config_ != null ? other.Config.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLog Clone() {
      return new AccessLog(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the access log implementation to instantiate. The name must
    /// match a statically registered access log. Current built-in loggers include:
    /// 1) "envoy.file_access_log"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter filter_;
    /// <summary>
    /// Filter which is used to determine if the access log needs to be written.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter Filter {
      get { return filter_; }
      set {
        filter_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Struct config_;
    /// <summary>
    /// Custom configuration that depends on the access log being instantiated. built-in configurations
    /// include:
    /// 1) "envoy.file_access_log": :ref:`FileAccessLog
    /// &lt;envoy_api_msg_config.filter.accesslog.v2.FileAccessLog>`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Struct Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Filter, other.Filter)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (filter_ != null) hash ^= Filter.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (filter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Filter);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (filter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLog other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.filter_ != null) {
        if (filter_ == null) {
          filter_ = new global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter();
        }
        Filter.MergeFrom(other.Filter);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
        }
        Config.MergeFrom(other.Config);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (filter_ == null) {
              filter_ = new global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter();
            }
            input.ReadMessage(filter_);
            break;
          }
          case 26: {
            if (config_ == null) {
              config_ = new global::Google.Protobuf.WellKnownTypes.Struct();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccessLogFilter : pb::IMessage<AccessLogFilter> {
    private static readonly pb::MessageParser<AccessLogFilter> _parser = new pb::MessageParser<AccessLogFilter>(() => new AccessLogFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogFilter(AccessLogFilter other) : this() {
      switch (other.FilterSpecifierCase) {
        case FilterSpecifierOneofCase.StatusCodeFilter:
          StatusCodeFilter = other.StatusCodeFilter.Clone();
          break;
        case FilterSpecifierOneofCase.DurationFilter:
          DurationFilter = other.DurationFilter.Clone();
          break;
        case FilterSpecifierOneofCase.NotHealthCheckFilter:
          NotHealthCheckFilter = other.NotHealthCheckFilter.Clone();
          break;
        case FilterSpecifierOneofCase.TraceableFilter:
          TraceableFilter = other.TraceableFilter.Clone();
          break;
        case FilterSpecifierOneofCase.RuntimeFilter:
          RuntimeFilter = other.RuntimeFilter.Clone();
          break;
        case FilterSpecifierOneofCase.AndFilter:
          AndFilter = other.AndFilter.Clone();
          break;
        case FilterSpecifierOneofCase.OrFilter:
          OrFilter = other.OrFilter.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogFilter Clone() {
      return new AccessLogFilter(this);
    }

    /// <summary>Field number for the "status_code_filter" field.</summary>
    public const int StatusCodeFilterFieldNumber = 1;
    /// <summary>
    /// Status code filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter StatusCodeFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.StatusCodeFilter ? (global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.StatusCodeFilter;
      }
    }

    /// <summary>Field number for the "duration_filter" field.</summary>
    public const int DurationFilterFieldNumber = 2;
    /// <summary>
    /// Duration filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.DurationFilter DurationFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.DurationFilter ? (global::Envoy.Config.Filter.Accesslog.V2.DurationFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.DurationFilter;
      }
    }

    /// <summary>Field number for the "not_health_check_filter" field.</summary>
    public const int NotHealthCheckFilterFieldNumber = 3;
    /// <summary>
    /// Not health check filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter NotHealthCheckFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.NotHealthCheckFilter ? (global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.NotHealthCheckFilter;
      }
    }

    /// <summary>Field number for the "traceable_filter" field.</summary>
    public const int TraceableFilterFieldNumber = 4;
    /// <summary>
    /// Traceable filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter TraceableFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.TraceableFilter ? (global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.TraceableFilter;
      }
    }

    /// <summary>Field number for the "runtime_filter" field.</summary>
    public const int RuntimeFilterFieldNumber = 5;
    /// <summary>
    /// Runtime filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter RuntimeFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.RuntimeFilter ? (global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.RuntimeFilter;
      }
    }

    /// <summary>Field number for the "and_filter" field.</summary>
    public const int AndFilterFieldNumber = 6;
    /// <summary>
    /// And filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.AndFilter AndFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.AndFilter ? (global::Envoy.Config.Filter.Accesslog.V2.AndFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.AndFilter;
      }
    }

    /// <summary>Field number for the "or_filter" field.</summary>
    public const int OrFilterFieldNumber = 7;
    /// <summary>
    /// Or filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.OrFilter OrFilter {
      get { return filterSpecifierCase_ == FilterSpecifierOneofCase.OrFilter ? (global::Envoy.Config.Filter.Accesslog.V2.OrFilter) filterSpecifier_ : null; }
      set {
        filterSpecifier_ = value;
        filterSpecifierCase_ = value == null ? FilterSpecifierOneofCase.None : FilterSpecifierOneofCase.OrFilter;
      }
    }

    private object filterSpecifier_;
    /// <summary>Enum of possible cases for the "filter_specifier" oneof.</summary>
    public enum FilterSpecifierOneofCase {
      None = 0,
      StatusCodeFilter = 1,
      DurationFilter = 2,
      NotHealthCheckFilter = 3,
      TraceableFilter = 4,
      RuntimeFilter = 5,
      AndFilter = 6,
      OrFilter = 7,
    }
    private FilterSpecifierOneofCase filterSpecifierCase_ = FilterSpecifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterSpecifierOneofCase FilterSpecifierCase {
      get { return filterSpecifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilterSpecifier() {
      filterSpecifierCase_ = FilterSpecifierOneofCase.None;
      filterSpecifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StatusCodeFilter, other.StatusCodeFilter)) return false;
      if (!object.Equals(DurationFilter, other.DurationFilter)) return false;
      if (!object.Equals(NotHealthCheckFilter, other.NotHealthCheckFilter)) return false;
      if (!object.Equals(TraceableFilter, other.TraceableFilter)) return false;
      if (!object.Equals(RuntimeFilter, other.RuntimeFilter)) return false;
      if (!object.Equals(AndFilter, other.AndFilter)) return false;
      if (!object.Equals(OrFilter, other.OrFilter)) return false;
      if (FilterSpecifierCase != other.FilterSpecifierCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.StatusCodeFilter) hash ^= StatusCodeFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.DurationFilter) hash ^= DurationFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.NotHealthCheckFilter) hash ^= NotHealthCheckFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.TraceableFilter) hash ^= TraceableFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.RuntimeFilter) hash ^= RuntimeFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.AndFilter) hash ^= AndFilter.GetHashCode();
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.OrFilter) hash ^= OrFilter.GetHashCode();
      hash ^= (int) filterSpecifierCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.StatusCodeFilter) {
        output.WriteRawTag(10);
        output.WriteMessage(StatusCodeFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.DurationFilter) {
        output.WriteRawTag(18);
        output.WriteMessage(DurationFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.NotHealthCheckFilter) {
        output.WriteRawTag(26);
        output.WriteMessage(NotHealthCheckFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.TraceableFilter) {
        output.WriteRawTag(34);
        output.WriteMessage(TraceableFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.RuntimeFilter) {
        output.WriteRawTag(42);
        output.WriteMessage(RuntimeFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.AndFilter) {
        output.WriteRawTag(50);
        output.WriteMessage(AndFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.OrFilter) {
        output.WriteRawTag(58);
        output.WriteMessage(OrFilter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.StatusCodeFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusCodeFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.DurationFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DurationFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.NotHealthCheckFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotHealthCheckFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.TraceableFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TraceableFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.RuntimeFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RuntimeFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.AndFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AndFilter);
      }
      if (filterSpecifierCase_ == FilterSpecifierOneofCase.OrFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrFilter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogFilter other) {
      if (other == null) {
        return;
      }
      switch (other.FilterSpecifierCase) {
        case FilterSpecifierOneofCase.StatusCodeFilter:
          if (StatusCodeFilter == null) {
            StatusCodeFilter = new global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter();
          }
          StatusCodeFilter.MergeFrom(other.StatusCodeFilter);
          break;
        case FilterSpecifierOneofCase.DurationFilter:
          if (DurationFilter == null) {
            DurationFilter = new global::Envoy.Config.Filter.Accesslog.V2.DurationFilter();
          }
          DurationFilter.MergeFrom(other.DurationFilter);
          break;
        case FilterSpecifierOneofCase.NotHealthCheckFilter:
          if (NotHealthCheckFilter == null) {
            NotHealthCheckFilter = new global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter();
          }
          NotHealthCheckFilter.MergeFrom(other.NotHealthCheckFilter);
          break;
        case FilterSpecifierOneofCase.TraceableFilter:
          if (TraceableFilter == null) {
            TraceableFilter = new global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter();
          }
          TraceableFilter.MergeFrom(other.TraceableFilter);
          break;
        case FilterSpecifierOneofCase.RuntimeFilter:
          if (RuntimeFilter == null) {
            RuntimeFilter = new global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter();
          }
          RuntimeFilter.MergeFrom(other.RuntimeFilter);
          break;
        case FilterSpecifierOneofCase.AndFilter:
          if (AndFilter == null) {
            AndFilter = new global::Envoy.Config.Filter.Accesslog.V2.AndFilter();
          }
          AndFilter.MergeFrom(other.AndFilter);
          break;
        case FilterSpecifierOneofCase.OrFilter:
          if (OrFilter == null) {
            OrFilter = new global::Envoy.Config.Filter.Accesslog.V2.OrFilter();
          }
          OrFilter.MergeFrom(other.OrFilter);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.StatusCodeFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.StatusCodeFilter) {
              subBuilder.MergeFrom(StatusCodeFilter);
            }
            input.ReadMessage(subBuilder);
            StatusCodeFilter = subBuilder;
            break;
          }
          case 18: {
            global::Envoy.Config.Filter.Accesslog.V2.DurationFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.DurationFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.DurationFilter) {
              subBuilder.MergeFrom(DurationFilter);
            }
            input.ReadMessage(subBuilder);
            DurationFilter = subBuilder;
            break;
          }
          case 26: {
            global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.NotHealthCheckFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.NotHealthCheckFilter) {
              subBuilder.MergeFrom(NotHealthCheckFilter);
            }
            input.ReadMessage(subBuilder);
            NotHealthCheckFilter = subBuilder;
            break;
          }
          case 34: {
            global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.TraceableFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.TraceableFilter) {
              subBuilder.MergeFrom(TraceableFilter);
            }
            input.ReadMessage(subBuilder);
            TraceableFilter = subBuilder;
            break;
          }
          case 42: {
            global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.RuntimeFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.RuntimeFilter) {
              subBuilder.MergeFrom(RuntimeFilter);
            }
            input.ReadMessage(subBuilder);
            RuntimeFilter = subBuilder;
            break;
          }
          case 50: {
            global::Envoy.Config.Filter.Accesslog.V2.AndFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.AndFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.AndFilter) {
              subBuilder.MergeFrom(AndFilter);
            }
            input.ReadMessage(subBuilder);
            AndFilter = subBuilder;
            break;
          }
          case 58: {
            global::Envoy.Config.Filter.Accesslog.V2.OrFilter subBuilder = new global::Envoy.Config.Filter.Accesslog.V2.OrFilter();
            if (filterSpecifierCase_ == FilterSpecifierOneofCase.OrFilter) {
              subBuilder.MergeFrom(OrFilter);
            }
            input.ReadMessage(subBuilder);
            OrFilter = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filter on an integer comparison.
  /// </summary>
  public sealed partial class ComparisonFilter : pb::IMessage<ComparisonFilter> {
    private static readonly pb::MessageParser<ComparisonFilter> _parser = new pb::MessageParser<ComparisonFilter>(() => new ComparisonFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComparisonFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComparisonFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComparisonFilter(ComparisonFilter other) : this() {
      op_ = other.op_;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComparisonFilter Clone() {
      return new ComparisonFilter(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter.Types.Op op_ = 0;
    /// <summary>
    /// Comparison operator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter.Types.Op Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Envoy.Api.V2.Core.RuntimeUInt32 value_;
    /// <summary>
    /// Value to compare against.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.RuntimeUInt32 Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComparisonFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComparisonFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Op != other.Op) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Op != 0) hash ^= Op.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Op);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComparisonFilter other) {
      if (other == null) {
        return;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Envoy.Api.V2.Core.RuntimeUInt32();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            op_ = (global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter.Types.Op) input.ReadEnum();
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Envoy.Api.V2.Core.RuntimeUInt32();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ComparisonFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Op {
        /// <summary>
        /// =
        /// </summary>
        [pbr::OriginalName("EQ")] Eq = 0,
        /// <summary>
        /// >=
        /// </summary>
        [pbr::OriginalName("GE")] Ge = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// Filters on HTTP response/status code.
  /// </summary>
  public sealed partial class StatusCodeFilter : pb::IMessage<StatusCodeFilter> {
    private static readonly pb::MessageParser<StatusCodeFilter> _parser = new pb::MessageParser<StatusCodeFilter>(() => new StatusCodeFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusCodeFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusCodeFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusCodeFilter(StatusCodeFilter other) : this() {
      Comparison = other.comparison_ != null ? other.Comparison.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusCodeFilter Clone() {
      return new StatusCodeFilter(this);
    }

    /// <summary>Field number for the "comparison" field.</summary>
    public const int ComparisonFieldNumber = 1;
    private global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter comparison_;
    /// <summary>
    /// Comparison.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter Comparison {
      get { return comparison_; }
      set {
        comparison_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusCodeFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusCodeFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Comparison, other.Comparison)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (comparison_ != null) hash ^= Comparison.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (comparison_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Comparison);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (comparison_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Comparison);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusCodeFilter other) {
      if (other == null) {
        return;
      }
      if (other.comparison_ != null) {
        if (comparison_ == null) {
          comparison_ = new global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter();
        }
        Comparison.MergeFrom(other.Comparison);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (comparison_ == null) {
              comparison_ = new global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter();
            }
            input.ReadMessage(comparison_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters on total request duration in milliseconds.
  /// </summary>
  public sealed partial class DurationFilter : pb::IMessage<DurationFilter> {
    private static readonly pb::MessageParser<DurationFilter> _parser = new pb::MessageParser<DurationFilter>(() => new DurationFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DurationFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurationFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurationFilter(DurationFilter other) : this() {
      Comparison = other.comparison_ != null ? other.Comparison.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DurationFilter Clone() {
      return new DurationFilter(this);
    }

    /// <summary>Field number for the "comparison" field.</summary>
    public const int ComparisonFieldNumber = 1;
    private global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter comparison_;
    /// <summary>
    /// Comparison.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter Comparison {
      get { return comparison_; }
      set {
        comparison_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DurationFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DurationFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Comparison, other.Comparison)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (comparison_ != null) hash ^= Comparison.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (comparison_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Comparison);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (comparison_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Comparison);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DurationFilter other) {
      if (other == null) {
        return;
      }
      if (other.comparison_ != null) {
        if (comparison_ == null) {
          comparison_ = new global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter();
        }
        Comparison.MergeFrom(other.Comparison);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (comparison_ == null) {
              comparison_ = new global::Envoy.Config.Filter.Accesslog.V2.ComparisonFilter();
            }
            input.ReadMessage(comparison_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Filters for requests that are not health check requests. A health check
  /// request is marked by the health check filter.
  /// </summary>
  public sealed partial class NotHealthCheckFilter : pb::IMessage<NotHealthCheckFilter> {
    private static readonly pb::MessageParser<NotHealthCheckFilter> _parser = new pb::MessageParser<NotHealthCheckFilter>(() => new NotHealthCheckFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotHealthCheckFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotHealthCheckFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotHealthCheckFilter(NotHealthCheckFilter other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotHealthCheckFilter Clone() {
      return new NotHealthCheckFilter(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotHealthCheckFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotHealthCheckFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotHealthCheckFilter other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Filters for requests that are traceable. See the tracing overview for more
  /// information on how a request becomes traceable.
  /// </summary>
  public sealed partial class TraceableFilter : pb::IMessage<TraceableFilter> {
    private static readonly pb::MessageParser<TraceableFilter> _parser = new pb::MessageParser<TraceableFilter>(() => new TraceableFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceableFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceableFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceableFilter(TraceableFilter other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceableFilter Clone() {
      return new TraceableFilter(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceableFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceableFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceableFilter other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Filters for random sampling of requests. Sampling pivots on the header
  /// :ref:`x-request-id&lt;config_http_conn_man_headers_x-request-id>` being present. If
  /// :ref:`x-request-id&lt;config_http_conn_man_headers_x-request-id>` is present, the filter will
  /// consistently sample across multiple hosts based on the runtime key value and the value extracted
  /// from :ref:`x-request-id&lt;config_http_conn_man_headers_x-request-id>`. If it is missing, the
  /// filter will randomly sample based on the runtime key value.
  /// </summary>
  public sealed partial class RuntimeFilter : pb::IMessage<RuntimeFilter> {
    private static readonly pb::MessageParser<RuntimeFilter> _parser = new pb::MessageParser<RuntimeFilter>(() => new RuntimeFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RuntimeFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeFilter(RuntimeFilter other) : this() {
      runtimeKey_ = other.runtimeKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuntimeFilter Clone() {
      return new RuntimeFilter(this);
    }

    /// <summary>Field number for the "runtime_key" field.</summary>
    public const int RuntimeKeyFieldNumber = 1;
    private string runtimeKey_ = "";
    /// <summary>
    /// Runtime key to get the percentage of requests to be sampled. This runtime
    /// control is specified in the range 0-100 and defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RuntimeKey {
      get { return runtimeKey_; }
      set {
        runtimeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RuntimeFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RuntimeFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RuntimeKey != other.RuntimeKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RuntimeKey.Length != 0) hash ^= RuntimeKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RuntimeKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RuntimeKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RuntimeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RuntimeKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RuntimeFilter other) {
      if (other == null) {
        return;
      }
      if (other.RuntimeKey.Length != 0) {
        RuntimeKey = other.RuntimeKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RuntimeKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Performs a logical “and” operation on the result of each filter in filters.
  /// Filters are evaluated sequentially and if one of them returns false, the
  /// filter returns false immediately.
  /// </summary>
  public sealed partial class AndFilter : pb::IMessage<AndFilter> {
    private static readonly pb::MessageParser<AndFilter> _parser = new pb::MessageParser<AndFilter>(() => new AndFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AndFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AndFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AndFilter(AndFilter other) : this() {
      filters_ = other.filters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AndFilter Clone() {
      return new AndFilter(this);
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(10, global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> filters_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> Filters {
      get { return filters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AndFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AndFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!filters_.Equals(other.filters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= filters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filters_.WriteTo(output, _repeated_filters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filters_.CalculateSize(_repeated_filters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AndFilter other) {
      if (other == null) {
        return;
      }
      filters_.Add(other.filters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Performs a logical “or” operation on the result of each individual filter.
  /// Filters are evaluated sequentially and if one of them returns true, the
  /// filter returns true immediately.
  /// </summary>
  public sealed partial class OrFilter : pb::IMessage<OrFilter> {
    private static readonly pb::MessageParser<OrFilter> _parser = new pb::MessageParser<OrFilter>(() => new OrFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrFilter(OrFilter other) : this() {
      filters_ = other.filters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrFilter Clone() {
      return new OrFilter(this);
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(18, global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> filters_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLogFilter> Filters {
      get { return filters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!filters_.Equals(other.filters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= filters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filters_.WriteTo(output, _repeated_filters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filters_.CalculateSize(_repeated_filters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrFilter other) {
      if (other == null) {
        return;
      }
      filters_.Add(other.filters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Custom configuration for an AccessLog that writes log entries directly to a file.
  /// Configures the built-in *envoy.file_access_log* AccessLog.
  /// </summary>
  public sealed partial class FileAccessLog : pb::IMessage<FileAccessLog> {
    private static readonly pb::MessageParser<FileAccessLog> _parser = new pb::MessageParser<FileAccessLog>(() => new FileAccessLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FileAccessLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileAccessLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileAccessLog(FileAccessLog other) : this() {
      path_ = other.path_;
      format_ = other.format_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FileAccessLog Clone() {
      return new FileAccessLog(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// A path to a local file to which to write the access log entries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private string format_ = "";
    /// <summary>
    /// Access log format. Envoy supports :ref:`custom access log formats
    /// &lt;config_access_log_format>` as well as a :ref:`default format
    /// &lt;config_access_log_default_format>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Format {
      get { return format_; }
      set {
        format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FileAccessLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FileAccessLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (Format != other.Format) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (Format.Length != 0) hash ^= Format.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (Format.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Format);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Format.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FileAccessLog other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.Format.Length != 0) {
        Format = other.Format;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            Format = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
