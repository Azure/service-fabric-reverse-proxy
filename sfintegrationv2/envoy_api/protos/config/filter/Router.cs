// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http/router/v2/router.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Http.Router.V2 {

  /// <summary>Holder for reflection information generated from http/router/v2/router.proto</summary>
  public static partial class RouterReflection {

    #region Descriptor
    /// <summary>File descriptor for http/router/v2/router.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RouterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtodHRwL3JvdXRlci92Mi9yb3V0ZXIucHJvdG8SImVudm95LmNvbmZpZy5m",
            "aWx0ZXIuaHR0cC5yb3V0ZXIudjIaMGVudm95L2NvbmZpZy9maWx0ZXIvYWNj",
            "ZXNzbG9nL3YyL2FjY2Vzc2xvZy5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dy",
            "YXBwZXJzLnByb3RvIpgBCgZSb3V0ZXISMQoNZHluYW1pY19zdGF0cxgBIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSGAoQc3RhcnRfY2hpbGRf",
            "c3BhbhgCIAEoCBJBCgx1cHN0cmVhbV9sb2cYAyADKAsyKy5lbnZveS5jb25m",
            "aWcuZmlsdGVyLmFjY2Vzc2xvZy52Mi5BY2Nlc3NMb2dCBFoCdjJiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Filter.Accesslog.V2.AccesslogReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.Router.V2.Router), global::Envoy.Config.Filter.Http.Router.V2.Router.Parser, new[]{ "DynamicStats", "StartChildSpan", "UpstreamLog" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Router : pb::IMessage<Router> {
    private static readonly pb::MessageParser<Router> _parser = new pb::MessageParser<Router>(() => new Router());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Router> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.Router.V2.RouterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Router() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Router(Router other) : this() {
      DynamicStats = other.DynamicStats;
      startChildSpan_ = other.startChildSpan_;
      upstreamLog_ = other.upstreamLog_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Router Clone() {
      return new Router(this);
    }

    /// <summary>Field number for the "dynamic_stats" field.</summary>
    public const int DynamicStatsFieldNumber = 1;
    private static readonly pb::FieldCodec<bool?> _single_dynamicStats_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
    private bool? dynamicStats_;
    /// <summary>
    /// Whether the router generates dynamic cluster statistics. Defaults to
    /// true. Can be disabled in high performance scenarios.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? DynamicStats {
      get { return dynamicStats_; }
      set {
        dynamicStats_ = value;
      }
    }

    /// <summary>Field number for the "start_child_span" field.</summary>
    public const int StartChildSpanFieldNumber = 2;
    private bool startChildSpan_;
    /// <summary>
    /// Whether to start a child span for egress routed calls. This can be
    /// useful in scenarios where other filters (auth, ratelimit, etc.) make
    /// outbound calls and have child spans rooted at the same ingress
    /// parent. Defaults to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StartChildSpan {
      get { return startChildSpan_; }
      set {
        startChildSpan_ = value;
      }
    }

    /// <summary>Field number for the "upstream_log" field.</summary>
    public const int UpstreamLogFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Envoy.Config.Filter.Accesslog.V2.AccessLog> _repeated_upstreamLog_codec
        = pb::FieldCodec.ForMessage(26, global::Envoy.Config.Filter.Accesslog.V2.AccessLog.Parser);
    private readonly pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLog> upstreamLog_ = new pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLog>();
    /// <summary>
    /// Configuration for HTTP upstream logs emitted by the router. Upstream logs
    /// are configured in the same way as access logs, but each log entry represents
    /// an upstream request. Presuming retries are configured, multiple upstream
    /// requests may be made for each downstream (inbound) request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Envoy.Config.Filter.Accesslog.V2.AccessLog> UpstreamLog {
      get { return upstreamLog_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Router);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Router other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DynamicStats != other.DynamicStats) return false;
      if (StartChildSpan != other.StartChildSpan) return false;
      if(!upstreamLog_.Equals(other.upstreamLog_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dynamicStats_ != null) hash ^= DynamicStats.GetHashCode();
      if (StartChildSpan != false) hash ^= StartChildSpan.GetHashCode();
      hash ^= upstreamLog_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dynamicStats_ != null) {
        _single_dynamicStats_codec.WriteTagAndValue(output, DynamicStats);
      }
      if (StartChildSpan != false) {
        output.WriteRawTag(16);
        output.WriteBool(StartChildSpan);
      }
      upstreamLog_.WriteTo(output, _repeated_upstreamLog_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dynamicStats_ != null) {
        size += _single_dynamicStats_codec.CalculateSizeWithTag(DynamicStats);
      }
      if (StartChildSpan != false) {
        size += 1 + 1;
      }
      size += upstreamLog_.CalculateSize(_repeated_upstreamLog_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Router other) {
      if (other == null) {
        return;
      }
      if (other.dynamicStats_ != null) {
        if (dynamicStats_ == null || other.DynamicStats != false) {
          DynamicStats = other.DynamicStats;
        }
      }
      if (other.StartChildSpan != false) {
        StartChildSpan = other.StartChildSpan;
      }
      upstreamLog_.Add(other.upstreamLog_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bool? value = _single_dynamicStats_codec.Read(input);
            if (dynamicStats_ == null || value != false) {
              DynamicStats = value;
            }
            break;
          }
          case 16: {
            StartChildSpan = input.ReadBool();
            break;
          }
          case 26: {
            upstreamLog_.AddEntriesFrom(input, _repeated_upstreamLog_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
