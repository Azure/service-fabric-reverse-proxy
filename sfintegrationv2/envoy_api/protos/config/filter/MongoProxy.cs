// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network/mongo_proxy/v2/mongo_proxy.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Network.MongoProxy.V2 {

  /// <summary>Holder for reflection information generated from network/mongo_proxy/v2/mongo_proxy.proto</summary>
  public static partial class MongoProxyReflection {

    #region Descriptor
    /// <summary>File descriptor for network/mongo_proxy/v2/mongo_proxy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MongoProxyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihuZXR3b3JrL21vbmdvX3Byb3h5L3YyL21vbmdvX3Byb3h5LnByb3RvEipl",
            "bnZveS5jb25maWcuZmlsdGVyLm5ldHdvcmsubW9uZ29fcHJveHkudjIaKGVu",
            "dm95L2NvbmZpZy9maWx0ZXIvZmF1bHQvdjIvZmF1bHQucHJvdG8aF3ZhbGlk",
            "YXRlL3ZhbGlkYXRlLnByb3RvInkKCk1vbmdvUHJveHkSHgoLc3RhdF9wcmVm",
            "aXgYASABKAlCCbrpwAMEcgIgARISCgphY2Nlc3NfbG9nGAIgASgJEjcKBWRl",
            "bGF5GAMgASgLMiguZW52b3kuY29uZmlnLmZpbHRlci5mYXVsdC52Mi5GYXVs",
            "dERlbGF5QgRaAnYyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Config.Filter.Fault.V2.FaultReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Network.MongoProxy.V2.MongoProxy), global::Envoy.Config.Filter.Network.MongoProxy.V2.MongoProxy.Parser, new[]{ "StatPrefix", "AccessLog", "Delay" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MongoProxy : pb::IMessage<MongoProxy> {
    private static readonly pb::MessageParser<MongoProxy> _parser = new pb::MessageParser<MongoProxy>(() => new MongoProxy());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MongoProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Network.MongoProxy.V2.MongoProxyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongoProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongoProxy(MongoProxy other) : this() {
      statPrefix_ = other.statPrefix_;
      accessLog_ = other.accessLog_;
      Delay = other.delay_ != null ? other.Delay.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongoProxy Clone() {
      return new MongoProxy(this);
    }

    /// <summary>Field number for the "stat_prefix" field.</summary>
    public const int StatPrefixFieldNumber = 1;
    private string statPrefix_ = "";
    /// <summary>
    /// The human readable prefix to use when emitting :ref:`statistics
    /// &lt;config_network_filters_mongo_proxy_stats>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatPrefix {
      get { return statPrefix_; }
      set {
        statPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_log" field.</summary>
    public const int AccessLogFieldNumber = 2;
    private string accessLog_ = "";
    /// <summary>
    /// The optional path to use for writing Mongo access logs. If not access log
    /// path is specified no access logs will be written. Note that access log is
    /// also gated :ref:`runtime &lt;config_network_filters_mongo_proxy_runtime>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessLog {
      get { return accessLog_; }
      set {
        accessLog_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 3;
    private global::Envoy.Config.Filter.Fault.V2.FaultDelay delay_;
    /// <summary>
    /// Inject a fixed delay before proxying a Mongo operation. Delays are
    /// applied to the following MongoDB operations: Query, Insert, GetMore,
    /// and KillCursors. Once an active delay is in progress, all incoming
    /// data up until the timer event fires will be a part of the delay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Config.Filter.Fault.V2.FaultDelay Delay {
      get { return delay_; }
      set {
        delay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MongoProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MongoProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatPrefix != other.StatPrefix) return false;
      if (AccessLog != other.AccessLog) return false;
      if (!object.Equals(Delay, other.Delay)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatPrefix.Length != 0) hash ^= StatPrefix.GetHashCode();
      if (AccessLog.Length != 0) hash ^= AccessLog.GetHashCode();
      if (delay_ != null) hash ^= Delay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatPrefix.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatPrefix);
      }
      if (AccessLog.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccessLog);
      }
      if (delay_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Delay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatPrefix);
      }
      if (AccessLog.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessLog);
      }
      if (delay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MongoProxy other) {
      if (other == null) {
        return;
      }
      if (other.StatPrefix.Length != 0) {
        StatPrefix = other.StatPrefix;
      }
      if (other.AccessLog.Length != 0) {
        AccessLog = other.AccessLog;
      }
      if (other.delay_ != null) {
        if (delay_ == null) {
          delay_ = new global::Envoy.Config.Filter.Fault.V2.FaultDelay();
        }
        Delay.MergeFrom(other.Delay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StatPrefix = input.ReadString();
            break;
          }
          case 18: {
            AccessLog = input.ReadString();
            break;
          }
          case 26: {
            if (delay_ == null) {
              delay_ = new global::Envoy.Config.Filter.Fault.V2.FaultDelay();
            }
            input.ReadMessage(delay_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
