// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http/ext_authz/v2/ext_authz.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Config.Filter.Http.ExtAuthz.V2 {

  /// <summary>Holder for reflection information generated from http/ext_authz/v2/ext_authz.proto</summary>
  public static partial class ExtAuthzReflection {

    #region Descriptor
    /// <summary>File descriptor for http/ext_authz/v2/ext_authz.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExtAuthzReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFodHRwL2V4dF9hdXRoei92Mi9leHRfYXV0aHoucHJvdG8SJWVudm95LmNv",
            "bmZpZy5maWx0ZXIuaHR0cC5leHRfYXV0aHoudjIaJGVudm95L2FwaS92Mi9j",
            "b3JlL2dycGNfc2VydmljZS5wcm90bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJv",
            "dG8iXAoIRXh0QXV0aHoSNAoMZ3JwY19zZXJ2aWNlGAEgASgLMh4uZW52b3ku",
            "YXBpLnYyLmNvcmUuR3JwY1NlcnZpY2USGgoSZmFpbHVyZV9tb2RlX2FsbG93",
            "GAIgASgIQgRaAnYyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Envoy.Api.V2.Core.GrpcServiceReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Config.Filter.Http.ExtAuthz.V2.ExtAuthz), global::Envoy.Config.Filter.Http.ExtAuthz.V2.ExtAuthz.Parser, new[]{ "GrpcService", "FailureModeAllow" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// [#not-implemented-hide:]
  /// External Authorization filter calls out to an external service over the
  /// gRPC Authorization API defined by
  /// :ref:`external_auth &lt;envoy_api_msg_auth.CheckRequest>`.
  /// A failed check will cause this filter to return 403 Forbidden.
  /// </summary>
  public sealed partial class ExtAuthz : pb::IMessage<ExtAuthz> {
    private static readonly pb::MessageParser<ExtAuthz> _parser = new pb::MessageParser<ExtAuthz>(() => new ExtAuthz());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtAuthz> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Config.Filter.Http.ExtAuthz.V2.ExtAuthzReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtAuthz() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtAuthz(ExtAuthz other) : this() {
      GrpcService = other.grpcService_ != null ? other.GrpcService.Clone() : null;
      failureModeAllow_ = other.failureModeAllow_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtAuthz Clone() {
      return new ExtAuthz(this);
    }

    /// <summary>Field number for the "grpc_service" field.</summary>
    public const int GrpcServiceFieldNumber = 1;
    private global::Envoy.Api.V2.Core.GrpcService grpcService_;
    /// <summary>
    /// The external authorization gRPC service configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.GrpcService GrpcService {
      get { return grpcService_; }
      set {
        grpcService_ = value;
      }
    }

    /// <summary>Field number for the "failure_mode_allow" field.</summary>
    public const int FailureModeAllowFieldNumber = 2;
    private bool failureModeAllow_;
    /// <summary>
    /// The filter's behaviour in case the external authorization service does
    /// not respond back. If set to true then in case of failure to get a
    /// response back from the authorization service or getting a response that
    /// is NOT denied then traffic will be permitted.
    /// Defaults to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FailureModeAllow {
      get { return failureModeAllow_; }
      set {
        failureModeAllow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtAuthz);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtAuthz other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GrpcService, other.GrpcService)) return false;
      if (FailureModeAllow != other.FailureModeAllow) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (grpcService_ != null) hash ^= GrpcService.GetHashCode();
      if (FailureModeAllow != false) hash ^= FailureModeAllow.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (grpcService_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GrpcService);
      }
      if (FailureModeAllow != false) {
        output.WriteRawTag(16);
        output.WriteBool(FailureModeAllow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (grpcService_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GrpcService);
      }
      if (FailureModeAllow != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtAuthz other) {
      if (other == null) {
        return;
      }
      if (other.grpcService_ != null) {
        if (grpcService_ == null) {
          grpcService_ = new global::Envoy.Api.V2.Core.GrpcService();
        }
        GrpcService.MergeFrom(other.GrpcService);
      }
      if (other.FailureModeAllow != false) {
        FailureModeAllow = other.FailureModeAllow;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (grpcService_ == null) {
              grpcService_ = new global::Envoy.Api.V2.Core.GrpcService();
            }
            input.ReadMessage(grpcService_);
            break;
          }
          case 16: {
            FailureModeAllow = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
