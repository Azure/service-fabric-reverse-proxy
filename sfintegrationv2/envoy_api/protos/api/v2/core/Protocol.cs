// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Envoy.Api.V2.Core {

  /// <summary>Holder for reflection information generated from protocol.proto</summary>
  public static partial class ProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5wcm90b2NvbC5wcm90bxIRZW52b3kuYXBpLnYyLmNvcmUaHmdvb2dsZS9w",
            "cm90b2J1Zi93cmFwcGVycy5wcm90bxoXdmFsaWRhdGUvdmFsaWRhdGUucHJv",
            "dG8aFGdvZ29wcm90by9nb2dvLnByb3RvIhQKElRjcFByb3RvY29sT3B0aW9u",
            "cyJOChRIdHRwMVByb3RvY29sT3B0aW9ucxI2ChJhbGxvd19hYnNvbHV0ZV91",
            "cmwYASABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlIssCChRIdHRw",
            "MlByb3RvY29sT3B0aW9ucxI2ChBocGFja190YWJsZV9zaXplGAEgASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlEk0KFm1heF9jb25jdXJyZW50",
            "X3N0cmVhbXMYAiABKAsyHC5nb29nbGUucHJvdG9idWYuVUludDMyVmFsdWVC",
            "D7rpwAMKKggY/////wcoARJTChppbml0aWFsX3N0cmVhbV93aW5kb3dfc2l6",
            "ZRgDIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZUIRuunAAwwq",
            "Chj/////Byj//wMSVwoeaW5pdGlhbF9jb25uZWN0aW9uX3dpbmRvd19zaXpl",
            "GAQgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlQhG66cADDCoK",
            "GP////8HKP//AyJeChNHcnBjUHJvdG9jb2xPcHRpb25zEkcKFmh0dHAyX3By",
            "b3RvY29sX29wdGlvbnMYASABKAsyJy5lbnZveS5hcGkudjIuY29yZS5IdHRw",
            "MlByb3RvY29sT3B0aW9uc0IEqOIeAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Validate.ValidateReflection.Descriptor, global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.TcpProtocolOptions), global::Envoy.Api.V2.Core.TcpProtocolOptions.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.Http1ProtocolOptions), global::Envoy.Api.V2.Core.Http1ProtocolOptions.Parser, new[]{ "AllowAbsoluteUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.Http2ProtocolOptions), global::Envoy.Api.V2.Core.Http2ProtocolOptions.Parser, new[]{ "HpackTableSize", "MaxConcurrentStreams", "InitialStreamWindowSize", "InitialConnectionWindowSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Envoy.Api.V2.Core.GrpcProtocolOptions), global::Envoy.Api.V2.Core.GrpcProtocolOptions.Parser, new[]{ "Http2ProtocolOptions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// [#not-implemented-hide:]
  /// </summary>
  public sealed partial class TcpProtocolOptions : pb::IMessage<TcpProtocolOptions> {
    private static readonly pb::MessageParser<TcpProtocolOptions> _parser = new pb::MessageParser<TcpProtocolOptions>(() => new TcpProtocolOptions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TcpProtocolOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.ProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProtocolOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProtocolOptions(TcpProtocolOptions other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProtocolOptions Clone() {
      return new TcpProtocolOptions(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TcpProtocolOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TcpProtocolOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TcpProtocolOptions other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Http1ProtocolOptions : pb::IMessage<Http1ProtocolOptions> {
    private static readonly pb::MessageParser<Http1ProtocolOptions> _parser = new pb::MessageParser<Http1ProtocolOptions>(() => new Http1ProtocolOptions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Http1ProtocolOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.ProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http1ProtocolOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http1ProtocolOptions(Http1ProtocolOptions other) : this() {
      AllowAbsoluteUrl = other.AllowAbsoluteUrl;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http1ProtocolOptions Clone() {
      return new Http1ProtocolOptions(this);
    }

    /// <summary>Field number for the "allow_absolute_url" field.</summary>
    public const int AllowAbsoluteUrlFieldNumber = 1;
    private static readonly pb::FieldCodec<bool?> _single_allowAbsoluteUrl_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
    private bool? allowAbsoluteUrl_;
    /// <summary>
    /// Handle HTTP requests with absolute URLs in the requests. These requests
    /// are generally sent by clients to forward/explicit proxies. This allows clients to configure
    /// envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
    /// *http_proxy* environment variable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AllowAbsoluteUrl {
      get { return allowAbsoluteUrl_; }
      set {
        allowAbsoluteUrl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Http1ProtocolOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Http1ProtocolOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllowAbsoluteUrl != other.AllowAbsoluteUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (allowAbsoluteUrl_ != null) hash ^= AllowAbsoluteUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (allowAbsoluteUrl_ != null) {
        _single_allowAbsoluteUrl_codec.WriteTagAndValue(output, AllowAbsoluteUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (allowAbsoluteUrl_ != null) {
        size += _single_allowAbsoluteUrl_codec.CalculateSizeWithTag(AllowAbsoluteUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Http1ProtocolOptions other) {
      if (other == null) {
        return;
      }
      if (other.allowAbsoluteUrl_ != null) {
        if (allowAbsoluteUrl_ == null || other.AllowAbsoluteUrl != false) {
          AllowAbsoluteUrl = other.AllowAbsoluteUrl;
        }
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bool? value = _single_allowAbsoluteUrl_codec.Read(input);
            if (allowAbsoluteUrl_ == null || value != false) {
              AllowAbsoluteUrl = value;
            }
            break;
          }
        }
      }
    }

  }

  public sealed partial class Http2ProtocolOptions : pb::IMessage<Http2ProtocolOptions> {
    private static readonly pb::MessageParser<Http2ProtocolOptions> _parser = new pb::MessageParser<Http2ProtocolOptions>(() => new Http2ProtocolOptions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Http2ProtocolOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.ProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http2ProtocolOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http2ProtocolOptions(Http2ProtocolOptions other) : this() {
      HpackTableSize = other.HpackTableSize;
      MaxConcurrentStreams = other.MaxConcurrentStreams;
      InitialStreamWindowSize = other.InitialStreamWindowSize;
      InitialConnectionWindowSize = other.InitialConnectionWindowSize;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Http2ProtocolOptions Clone() {
      return new Http2ProtocolOptions(this);
    }

    /// <summary>Field number for the "hpack_table_size" field.</summary>
    public const int HpackTableSizeFieldNumber = 1;
    private static readonly pb::FieldCodec<uint?> _single_hpackTableSize_codec = pb::FieldCodec.ForStructWrapper<uint>(10);
    private uint? hpackTableSize_;
    /// <summary>
    /// `Maximum table size &lt;http://httpwg.org/specs/rfc7541.html#rfc.section.4.2>`_
    /// (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
    /// range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
    /// compression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? HpackTableSize {
      get { return hpackTableSize_; }
      set {
        hpackTableSize_ = value;
      }
    }

    /// <summary>Field number for the "max_concurrent_streams" field.</summary>
    public const int MaxConcurrentStreamsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint?> _single_maxConcurrentStreams_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
    private uint? maxConcurrentStreams_;
    /// <summary>
    /// `Maximum concurrent streams &lt;http://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2>`_
    /// allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
    /// and defaults to 2147483647.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? MaxConcurrentStreams {
      get { return maxConcurrentStreams_; }
      set {
        maxConcurrentStreams_ = value;
      }
    }

    /// <summary>Field number for the "initial_stream_window_size" field.</summary>
    public const int InitialStreamWindowSizeFieldNumber = 3;
    private static readonly pb::FieldCodec<uint?> _single_initialStreamWindowSize_codec = pb::FieldCodec.ForStructWrapper<uint>(26);
    private uint? initialStreamWindowSize_;
    /// <summary>
    /// This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
    /// HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
    /// stop the flow of data to the codec buffers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? InitialStreamWindowSize {
      get { return initialStreamWindowSize_; }
      set {
        initialStreamWindowSize_ = value;
      }
    }

    /// <summary>Field number for the "initial_connection_window_size" field.</summary>
    public const int InitialConnectionWindowSizeFieldNumber = 4;
    private static readonly pb::FieldCodec<uint?> _single_initialConnectionWindowSize_codec = pb::FieldCodec.ForStructWrapper<uint>(34);
    private uint? initialConnectionWindowSize_;
    /// <summary>
    /// Similar to *initial_stream_window_size*, but for connection-level flow-control
    /// window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? InitialConnectionWindowSize {
      get { return initialConnectionWindowSize_; }
      set {
        initialConnectionWindowSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Http2ProtocolOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Http2ProtocolOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HpackTableSize != other.HpackTableSize) return false;
      if (MaxConcurrentStreams != other.MaxConcurrentStreams) return false;
      if (InitialStreamWindowSize != other.InitialStreamWindowSize) return false;
      if (InitialConnectionWindowSize != other.InitialConnectionWindowSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hpackTableSize_ != null) hash ^= HpackTableSize.GetHashCode();
      if (maxConcurrentStreams_ != null) hash ^= MaxConcurrentStreams.GetHashCode();
      if (initialStreamWindowSize_ != null) hash ^= InitialStreamWindowSize.GetHashCode();
      if (initialConnectionWindowSize_ != null) hash ^= InitialConnectionWindowSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hpackTableSize_ != null) {
        _single_hpackTableSize_codec.WriteTagAndValue(output, HpackTableSize);
      }
      if (maxConcurrentStreams_ != null) {
        _single_maxConcurrentStreams_codec.WriteTagAndValue(output, MaxConcurrentStreams);
      }
      if (initialStreamWindowSize_ != null) {
        _single_initialStreamWindowSize_codec.WriteTagAndValue(output, InitialStreamWindowSize);
      }
      if (initialConnectionWindowSize_ != null) {
        _single_initialConnectionWindowSize_codec.WriteTagAndValue(output, InitialConnectionWindowSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hpackTableSize_ != null) {
        size += _single_hpackTableSize_codec.CalculateSizeWithTag(HpackTableSize);
      }
      if (maxConcurrentStreams_ != null) {
        size += _single_maxConcurrentStreams_codec.CalculateSizeWithTag(MaxConcurrentStreams);
      }
      if (initialStreamWindowSize_ != null) {
        size += _single_initialStreamWindowSize_codec.CalculateSizeWithTag(InitialStreamWindowSize);
      }
      if (initialConnectionWindowSize_ != null) {
        size += _single_initialConnectionWindowSize_codec.CalculateSizeWithTag(InitialConnectionWindowSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Http2ProtocolOptions other) {
      if (other == null) {
        return;
      }
      if (other.hpackTableSize_ != null) {
        if (hpackTableSize_ == null || other.HpackTableSize != 0) {
          HpackTableSize = other.HpackTableSize;
        }
      }
      if (other.maxConcurrentStreams_ != null) {
        if (maxConcurrentStreams_ == null || other.MaxConcurrentStreams != 0) {
          MaxConcurrentStreams = other.MaxConcurrentStreams;
        }
      }
      if (other.initialStreamWindowSize_ != null) {
        if (initialStreamWindowSize_ == null || other.InitialStreamWindowSize != 0) {
          InitialStreamWindowSize = other.InitialStreamWindowSize;
        }
      }
      if (other.initialConnectionWindowSize_ != null) {
        if (initialConnectionWindowSize_ == null || other.InitialConnectionWindowSize != 0) {
          InitialConnectionWindowSize = other.InitialConnectionWindowSize;
        }
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            uint? value = _single_hpackTableSize_codec.Read(input);
            if (hpackTableSize_ == null || value != 0) {
              HpackTableSize = value;
            }
            break;
          }
          case 18: {
            uint? value = _single_maxConcurrentStreams_codec.Read(input);
            if (maxConcurrentStreams_ == null || value != 0) {
              MaxConcurrentStreams = value;
            }
            break;
          }
          case 26: {
            uint? value = _single_initialStreamWindowSize_codec.Read(input);
            if (initialStreamWindowSize_ == null || value != 0) {
              InitialStreamWindowSize = value;
            }
            break;
          }
          case 34: {
            uint? value = _single_initialConnectionWindowSize_codec.Read(input);
            if (initialConnectionWindowSize_ == null || value != 0) {
              InitialConnectionWindowSize = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// [#not-implemented-hide:]
  /// </summary>
  public sealed partial class GrpcProtocolOptions : pb::IMessage<GrpcProtocolOptions> {
    private static readonly pb::MessageParser<GrpcProtocolOptions> _parser = new pb::MessageParser<GrpcProtocolOptions>(() => new GrpcProtocolOptions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GrpcProtocolOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Envoy.Api.V2.Core.ProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcProtocolOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcProtocolOptions(GrpcProtocolOptions other) : this() {
      Http2ProtocolOptions = other.http2ProtocolOptions_ != null ? other.Http2ProtocolOptions.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GrpcProtocolOptions Clone() {
      return new GrpcProtocolOptions(this);
    }

    /// <summary>Field number for the "http2_protocol_options" field.</summary>
    public const int Http2ProtocolOptionsFieldNumber = 1;
    private global::Envoy.Api.V2.Core.Http2ProtocolOptions http2ProtocolOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Envoy.Api.V2.Core.Http2ProtocolOptions Http2ProtocolOptions {
      get { return http2ProtocolOptions_; }
      set {
        http2ProtocolOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GrpcProtocolOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GrpcProtocolOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Http2ProtocolOptions, other.Http2ProtocolOptions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (http2ProtocolOptions_ != null) hash ^= Http2ProtocolOptions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (http2ProtocolOptions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Http2ProtocolOptions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (http2ProtocolOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Http2ProtocolOptions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GrpcProtocolOptions other) {
      if (other == null) {
        return;
      }
      if (other.http2ProtocolOptions_ != null) {
        if (http2ProtocolOptions_ == null) {
          http2ProtocolOptions_ = new global::Envoy.Api.V2.Core.Http2ProtocolOptions();
        }
        Http2ProtocolOptions.MergeFrom(other.Http2ProtocolOptions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (http2ProtocolOptions_ == null) {
              http2ProtocolOptions_ = new global::Envoy.Api.V2.Core.Http2ProtocolOptions();
            }
            input.ReadMessage(http2ProtocolOptions_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
