// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Opencensus.Proto.Stats {

  /// <summary>Holder for reflection information generated from stats.proto</summary>
  public static partial class StatsReflection {

    #region Descriptor
    /// <summary>File descriptor for stats.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StatsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtzdGF0cy5wcm90bxIWb3BlbmNlbnN1cy5wcm90by5zdGF0cxoeZ29vZ2xl",
            "L3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGlt",
            "ZXN0YW1wLnByb3RvIqoDChVNZWFzdXJlbWVudERlc2NyaXB0b3ISDAoEbmFt",
            "ZRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRJLCgR1bml0GAMgASgLMj0u",
            "b3BlbmNlbnN1cy5wcm90by5zdGF0cy5NZWFzdXJlbWVudERlc2NyaXB0b3Iu",
            "TWVhc3VyZW1lbnRVbml0Gr4BCg9NZWFzdXJlbWVudFVuaXQSDwoHcG93ZXIx",
            "MBgBIAEoBRJLCgpudW1lcmF0b3JzGAIgAygOMjcub3BlbmNlbnN1cy5wcm90",
            "by5zdGF0cy5NZWFzdXJlbWVudERlc2NyaXB0b3IuQmFzaWNVbml0Ek0KDGRl",
            "bm9taW5hdG9ycxgDIAMoDjI3Lm9wZW5jZW5zdXMucHJvdG8uc3RhdHMuTWVh",
            "c3VyZW1lbnREZXNjcmlwdG9yLkJhc2ljVW5pdCJgCglCYXNpY1VuaXQSCwoH",
            "VU5LTk9XThAAEgoKBlNDQUxBUhABEggKBEJJVFMQAhIJCgVCWVRFUxADEgsK",
            "B1NFQ09ORFMQBBIJCgVDT1JFUxAFEg0KCU1BWF9VTklUUxAGIu4BChdEaXN0",
            "cmlidXRpb25BZ2dyZWdhdGlvbhINCgVjb3VudBgBIAEoAxIMCgRtZWFuGAIg",
            "ASgBEgsKA3N1bRgDIAEoARJECgVyYW5nZRgEIAEoCzI1Lm9wZW5jZW5zdXMu",
            "cHJvdG8uc3RhdHMuRGlzdHJpYnV0aW9uQWdncmVnYXRpb24uUmFuZ2USFQoN",
            "YnVja2V0X2NvdW50cxgFIAMoAxIpCgR0YWdzGAYgAygLMhsub3BlbmNlbnN1",
            "cy5wcm90by5zdGF0cy5UYWcaIQoFUmFuZ2USCwoDbWluGAEgASgBEgsKA21h",
            "eBgCIAEoASI6CiFEaXN0cmlidXRpb25BZ2dyZWdhdGlvbkRlc2NyaXB0b3IS",
            "FQoNYnVja2V0X2JvdW5kcxgBIAMoASLjAQoTSW50ZXJ2YWxBZ2dyZWdhdGlv",
            "bhJHCglpbnRlcnZhbHMYASADKAsyNC5vcGVuY2Vuc3VzLnByb3RvLnN0YXRz",
            "LkludGVydmFsQWdncmVnYXRpb24uSW50ZXJ2YWwSKQoEdGFncxgCIAMoCzIb",
            "Lm9wZW5jZW5zdXMucHJvdG8uc3RhdHMuVGFnGlgKCEludGVydmFsEjAKDWlu",
            "dGVydmFsX3NpemUYASABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24S",
            "DQoFY291bnQYAiABKAESCwoDc3VtGAMgASgBImsKHUludGVydmFsQWdncmVn",
            "YXRpb25EZXNjcmlwdG9yEhcKD25fc3ViX2ludGVydmFscxgBIAEoBRIxCg5p",
            "bnRlcnZhbF9zaXplcxgCIAMoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlv",
            "biIhCgNUYWcSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIq8CCg5WaWV3",
            "RGVzY3JpcHRvchIMCgRuYW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJ",
            "EiMKG21lYXN1cmVtZW50X2Rlc2NyaXB0b3JfbmFtZRgDIAEoCRJVChRpbnRl",
            "cnZhbF9hZ2dyZWdhdGlvbhgEIAEoCzI1Lm9wZW5jZW5zdXMucHJvdG8uc3Rh",
            "dHMuSW50ZXJ2YWxBZ2dyZWdhdGlvbkRlc2NyaXB0b3JIABJdChhkaXN0cmli",
            "dXRpb25fYWdncmVnYXRpb24YBSABKAsyOS5vcGVuY2Vuc3VzLnByb3RvLnN0",
            "YXRzLkRpc3RyaWJ1dGlvbkFnZ3JlZ2F0aW9uRGVzY3JpcHRvckgAEhAKCHRh",
            "Z19rZXlzGAYgAygJQg0KC2FnZ3JlZ2F0aW9uIq0BChBEaXN0cmlidXRpb25W",
            "aWV3EkUKDGFnZ3JlZ2F0aW9ucxgBIAMoCzIvLm9wZW5jZW5zdXMucHJvdG8u",
            "c3RhdHMuRGlzdHJpYnV0aW9uQWdncmVnYXRpb24SKQoFc3RhcnQYAiABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEicKA2VuZBgDIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiUQoMSW50ZXJ2YWxWaWV3EkEKDGFn",
            "Z3JlZ2F0aW9ucxgBIAMoCzIrLm9wZW5jZW5zdXMucHJvdG8uc3RhdHMuSW50",
            "ZXJ2YWxBZ2dyZWdhdGlvbiKnAQoEVmlldxIRCgl2aWV3X25hbWUYASABKAkS",
            "RQoRZGlzdHJpYnV0aW9uX3ZpZXcYAiABKAsyKC5vcGVuY2Vuc3VzLnByb3Rv",
            "LnN0YXRzLkRpc3RyaWJ1dGlvblZpZXdIABI9Cg1pbnRlcnZhbF92aWV3GAMg",
            "ASgLMiQub3BlbmNlbnN1cy5wcm90by5zdGF0cy5JbnRlcnZhbFZpZXdIAEIG",
            "CgR2aWV3QjUKGWlvLm9wZW5jZW5zdXMucHJvdG8uc3RhdHNCClN0YXRzUHJv",
            "dG9QAVoKc3RhdHNwcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.MeasurementDescriptor), global::Opencensus.Proto.Stats.MeasurementDescriptor.Parser, new[]{ "Name", "Description", "Unit" }, null, new[]{ typeof(global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.MeasurementUnit), global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.MeasurementUnit.Parser, new[]{ "Power10", "Numerators", "Denominators" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.DistributionAggregation), global::Opencensus.Proto.Stats.DistributionAggregation.Parser, new[]{ "Count", "Mean", "Sum", "Range", "BucketCounts", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.DistributionAggregation.Types.Range), global::Opencensus.Proto.Stats.DistributionAggregation.Types.Range.Parser, new[]{ "Min", "Max" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.DistributionAggregationDescriptor), global::Opencensus.Proto.Stats.DistributionAggregationDescriptor.Parser, new[]{ "BucketBounds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.IntervalAggregation), global::Opencensus.Proto.Stats.IntervalAggregation.Parser, new[]{ "Intervals", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.IntervalAggregation.Types.Interval), global::Opencensus.Proto.Stats.IntervalAggregation.Types.Interval.Parser, new[]{ "IntervalSize", "Count", "Sum" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.IntervalAggregationDescriptor), global::Opencensus.Proto.Stats.IntervalAggregationDescriptor.Parser, new[]{ "NSubIntervals", "IntervalSizes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.Tag), global::Opencensus.Proto.Stats.Tag.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.ViewDescriptor), global::Opencensus.Proto.Stats.ViewDescriptor.Parser, new[]{ "Name", "Description", "MeasurementDescriptorName", "IntervalAggregation", "DistributionAggregation", "TagKeys" }, new[]{ "Aggregation" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.DistributionView), global::Opencensus.Proto.Stats.DistributionView.Parser, new[]{ "Aggregations", "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.IntervalView), global::Opencensus.Proto.Stats.IntervalView.Parser, new[]{ "Aggregations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Opencensus.Proto.Stats.View), global::Opencensus.Proto.Stats.View.Parser, new[]{ "ViewName", "DistributionView", "IntervalView" }, new[]{ "View" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// MeasurementDescriptor describes a data point (measurement) type.
  /// </summary>
  public sealed partial class MeasurementDescriptor : pb::IMessage<MeasurementDescriptor> {
    private static readonly pb::MessageParser<MeasurementDescriptor> _parser = new pb::MessageParser<MeasurementDescriptor>(() => new MeasurementDescriptor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeasurementDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.StatsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeasurementDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeasurementDescriptor(MeasurementDescriptor other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      Unit = other.unit_ != null ? other.Unit.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeasurementDescriptor Clone() {
      return new MeasurementDescriptor(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// A descriptive name, e.g. rpc_latency, cpu. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// More detailed description of the resource, used in documentation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 3;
    private global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.MeasurementUnit unit_;
    /// <summary>
    /// The units used by this type of measurement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.MeasurementUnit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeasurementDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeasurementDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Unit, other.Unit)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (unit_ != null) hash ^= Unit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (unit_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Unit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (unit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeasurementDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.unit_ != null) {
        if (unit_ == null) {
          unit_ = new global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.MeasurementUnit();
        }
        Unit.MergeFrom(other.Unit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (unit_ == null) {
              unit_ = new global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.MeasurementUnit();
            }
            input.ReadMessage(unit_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MeasurementDescriptor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Fundamental units of measurement supported by Census
      /// TODO(aveitch): expand this to include other S.I. units?
      /// </summary>
      public enum BasicUnit {
        /// <summary>
        /// Implementations should not use this
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Dimensionless
        /// </summary>
        [pbr::OriginalName("SCALAR")] Scalar = 1,
        /// <summary>
        /// A single bit
        /// </summary>
        [pbr::OriginalName("BITS")] Bits = 2,
        /// <summary>
        /// An 8-bit byte
        /// </summary>
        [pbr::OriginalName("BYTES")] Bytes = 3,
        /// <summary>
        /// S.I. unit
        /// </summary>
        [pbr::OriginalName("SECONDS")] Seconds = 4,
        /// <summary>
        /// CPU core usage
        /// </summary>
        [pbr::OriginalName("CORES")] Cores = 5,
        /// <summary>
        /// Last defined value; implementations should only use
        /// </summary>
        [pbr::OriginalName("MAX_UNITS")] MaxUnits = 6,
      }

      /// <summary>
      /// MeasurementUnit lets you build compound units of the form
      ///   10^n * (A * B * ...) / (X * Y * ...),
      /// where the elements in the numerator and denominator are all BasicUnits.  A
      /// MeasurementUnit must have at least one BasicUnit in its numerator.
      ///
      /// To specify multiplication in the numerator or denominator, simply specify
      /// multiple numerator or denominator fields.  For example:
      ///
      /// - byte-seconds (i.e. bytes * seconds):
      ///     numerator: BYTES
      ///     numerator: SECS
      ///
      /// - events/sec^2 (i.e. rate of change of events/sec):
      ///     numerator: SCALAR
      ///     denominator: SECS
      ///     denominator: SECS
      ///
      /// To specify multiples (in power of 10) of units, specify a non-zero
      /// 'power10' value, for example:
      ///
      /// - MB/s (i.e. megabytes / s):
      ///     power10: 6
      ///     numerator: BYTES
      ///     denominator: SECS
      ///
      /// - nanoseconds
      ///     power10: -9
      ///     numerator: SECS
      /// </summary>
      public sealed partial class MeasurementUnit : pb::IMessage<MeasurementUnit> {
        private static readonly pb::MessageParser<MeasurementUnit> _parser = new pb::MessageParser<MeasurementUnit>(() => new MeasurementUnit());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MeasurementUnit> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Opencensus.Proto.Stats.MeasurementDescriptor.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MeasurementUnit() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MeasurementUnit(MeasurementUnit other) : this() {
          power10_ = other.power10_;
          numerators_ = other.numerators_.Clone();
          denominators_ = other.denominators_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MeasurementUnit Clone() {
          return new MeasurementUnit(this);
        }

        /// <summary>Field number for the "power10" field.</summary>
        public const int Power10FieldNumber = 1;
        private int power10_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Power10 {
          get { return power10_; }
          set {
            power10_ = value;
          }
        }

        /// <summary>Field number for the "numerators" field.</summary>
        public const int NumeratorsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit> _repeated_numerators_codec
            = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit) x);
        private readonly pbc::RepeatedField<global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit> numerators_ = new pbc::RepeatedField<global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit> Numerators {
          get { return numerators_; }
        }

        /// <summary>Field number for the "denominators" field.</summary>
        public const int DenominatorsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit> _repeated_denominators_codec
            = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit) x);
        private readonly pbc::RepeatedField<global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit> denominators_ = new pbc::RepeatedField<global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Opencensus.Proto.Stats.MeasurementDescriptor.Types.BasicUnit> Denominators {
          get { return denominators_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MeasurementUnit);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MeasurementUnit other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Power10 != other.Power10) return false;
          if(!numerators_.Equals(other.numerators_)) return false;
          if(!denominators_.Equals(other.denominators_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Power10 != 0) hash ^= Power10.GetHashCode();
          hash ^= numerators_.GetHashCode();
          hash ^= denominators_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Power10 != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Power10);
          }
          numerators_.WriteTo(output, _repeated_numerators_codec);
          denominators_.WriteTo(output, _repeated_denominators_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Power10 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power10);
          }
          size += numerators_.CalculateSize(_repeated_numerators_codec);
          size += denominators_.CalculateSize(_repeated_denominators_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MeasurementUnit other) {
          if (other == null) {
            return;
          }
          if (other.Power10 != 0) {
            Power10 = other.Power10;
          }
          numerators_.Add(other.numerators_);
          denominators_.Add(other.denominators_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Power10 = input.ReadInt32();
                break;
              }
              case 18:
              case 16: {
                numerators_.AddEntriesFrom(input, _repeated_numerators_codec);
                break;
              }
              case 26:
              case 24: {
                denominators_.AddEntriesFrom(input, _repeated_denominators_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// DistributionAggregation contains summary statistics for a population of
  /// values and, optionally, a histogram representing the distribution of those
  /// values across a specified set of histogram buckets, as defined in
  /// DistributionAggregationDescriptor.bucket_bounds.
  ///
  /// The summary statistics are the count, mean, minimum, and the maximum of the
  /// set of population of values.
  ///
  /// Although it is not forbidden, it is generally a bad idea to include
  /// non-finite values (infinities or NaNs) in the population of values, as this
  /// will render the `mean` field meaningless.
  /// </summary>
  public sealed partial class DistributionAggregation : pb::IMessage<DistributionAggregation> {
    private static readonly pb::MessageParser<DistributionAggregation> _parser = new pb::MessageParser<DistributionAggregation>(() => new DistributionAggregation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributionAggregation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.StatsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionAggregation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionAggregation(DistributionAggregation other) : this() {
      count_ = other.count_;
      mean_ = other.mean_;
      sum_ = other.sum_;
      Range = other.range_ != null ? other.Range.Clone() : null;
      bucketCounts_ = other.bucketCounts_.Clone();
      tags_ = other.tags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionAggregation Clone() {
      return new DistributionAggregation(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private long count_;
    /// <summary>
    /// The number of values in the population. Must be non-negative.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "mean" field.</summary>
    public const int MeanFieldNumber = 2;
    private double mean_;
    /// <summary>
    /// The arithmetic mean of the values in the population. If `count` is zero
    /// then this field must be zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Mean {
      get { return mean_; }
      set {
        mean_ = value;
      }
    }

    /// <summary>Field number for the "sum" field.</summary>
    public const int SumFieldNumber = 3;
    private double sum_;
    /// <summary>
    /// The sum of the values in the population.  If `count` is zero then this
    /// field must be zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sum {
      get { return sum_; }
      set {
        sum_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 4;
    private global::Opencensus.Proto.Stats.DistributionAggregation.Types.Range range_;
    /// <summary>
    /// The range of the population values. If `count` is zero, this field will not
    /// be defined.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.DistributionAggregation.Types.Range Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "bucket_counts" field.</summary>
    public const int BucketCountsFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_bucketCounts_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> bucketCounts_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// A Distribution may optionally contain a histogram of the values in the
    /// population. The histogram is given in `bucket_count` as counts of values
    /// that fall into one of a sequence of non-overlapping buckets, as described
    /// by `DistributionAggregationDescriptor.bucket_boundaries`. The sum of the
    /// values in `bucket_counts` must equal the value in `count`.
    ///
    /// Bucket counts are given in order under the numbering scheme described
    /// above (the underflow bucket has number 0; the finite buckets, if any,
    /// have numbers 1 through N-2; the overflow bucket has number N-1).
    ///
    /// The size of `bucket_count` must be no greater than N as defined in
    /// `bucket_boundaries`.
    ///
    /// Any suffix of trailing zero bucket_count fields may be omitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> BucketCounts {
      get { return bucketCounts_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Stats.Tag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(50, global::Opencensus.Proto.Stats.Tag.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Stats.Tag> tags_ = new pbc::RepeatedField<global::Opencensus.Proto.Stats.Tag>();
    /// <summary>
    /// Tags associated with this DistributionAggregation. These will be filled
    /// in based on the View specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Stats.Tag> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributionAggregation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributionAggregation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (Mean != other.Mean) return false;
      if (Sum != other.Sum) return false;
      if (!object.Equals(Range, other.Range)) return false;
      if(!bucketCounts_.Equals(other.bucketCounts_)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (Mean != 0D) hash ^= Mean.GetHashCode();
      if (Sum != 0D) hash ^= Sum.GetHashCode();
      if (range_ != null) hash ^= Range.GetHashCode();
      hash ^= bucketCounts_.GetHashCode();
      hash ^= tags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Count);
      }
      if (Mean != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Mean);
      }
      if (Sum != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Sum);
      }
      if (range_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Range);
      }
      bucketCounts_.WriteTo(output, _repeated_bucketCounts_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (Mean != 0D) {
        size += 1 + 8;
      }
      if (Sum != 0D) {
        size += 1 + 8;
      }
      if (range_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      size += bucketCounts_.CalculateSize(_repeated_bucketCounts_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributionAggregation other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.Mean != 0D) {
        Mean = other.Mean;
      }
      if (other.Sum != 0D) {
        Sum = other.Sum;
      }
      if (other.range_ != null) {
        if (range_ == null) {
          range_ = new global::Opencensus.Proto.Stats.DistributionAggregation.Types.Range();
        }
        Range.MergeFrom(other.Range);
      }
      bucketCounts_.Add(other.bucketCounts_);
      tags_.Add(other.tags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt64();
            break;
          }
          case 17: {
            Mean = input.ReadDouble();
            break;
          }
          case 25: {
            Sum = input.ReadDouble();
            break;
          }
          case 34: {
            if (range_ == null) {
              range_ = new global::Opencensus.Proto.Stats.DistributionAggregation.Types.Range();
            }
            input.ReadMessage(range_);
            break;
          }
          case 42:
          case 40: {
            bucketCounts_.AddEntriesFrom(input, _repeated_bucketCounts_codec);
            break;
          }
          case 50: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DistributionAggregation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Describes a range of population values.
      /// </summary>
      public sealed partial class Range : pb::IMessage<Range> {
        private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Range> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Opencensus.Proto.Stats.DistributionAggregation.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range(Range other) : this() {
          min_ = other.min_;
          max_ = other.max_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Range Clone() {
          return new Range(this);
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 1;
        private double min_;
        /// <summary>
        /// The minimum of the population values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Min {
          get { return min_; }
          set {
            min_ = value;
          }
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 2;
        private double max_;
        /// <summary>
        /// The maximum of the population values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Max {
          get { return max_; }
          set {
            max_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Range);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Range other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Min != other.Min) return false;
          if (Max != other.Max) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Min != 0D) hash ^= Min.GetHashCode();
          if (Max != 0D) hash ^= Max.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Min != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Min);
          }
          if (Max != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Max);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Min != 0D) {
            size += 1 + 8;
          }
          if (Max != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Range other) {
          if (other == null) {
            return;
          }
          if (other.Min != 0D) {
            Min = other.Min;
          }
          if (other.Max != 0D) {
            Max = other.Max;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 9: {
                Min = input.ReadDouble();
                break;
              }
              case 17: {
                Max = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DistributionAggregationDescriptor : pb::IMessage<DistributionAggregationDescriptor> {
    private static readonly pb::MessageParser<DistributionAggregationDescriptor> _parser = new pb::MessageParser<DistributionAggregationDescriptor>(() => new DistributionAggregationDescriptor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributionAggregationDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.StatsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionAggregationDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionAggregationDescriptor(DistributionAggregationDescriptor other) : this() {
      bucketBounds_ = other.bucketBounds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionAggregationDescriptor Clone() {
      return new DistributionAggregationDescriptor(this);
    }

    /// <summary>Field number for the "bucket_bounds" field.</summary>
    public const int BucketBoundsFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_bucketBounds_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> bucketBounds_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// A Distribution may optionally contain a histogram of the values in the
    /// population. The bucket boundaries for that histogram are described by
    /// `bucket_bounds`. This defines `size(bucket_bounds) + 1` (= N)
    /// buckets. The boundaries for bucket index i are:
    ///
    /// [-infinity, bucket_bounds[i]) for i == 0
    /// [bucket_bounds[i-1], bucket_bounds[i]) for 0 &lt; i &lt; N-2
    /// [bucket_bounds[i-1], +infinity) for i == N-1
    ///
    /// i.e. an underflow bucket (number 0), zero or more finite buckets (1
    /// through N - 2, and an overflow bucket (N - 1), with inclusive lower
    /// bounds and exclusive upper bounds.
    ///
    /// If `bucket_bounds` has no elements (zero size), then there is no
    /// histogram associated with the Distribution. If `bucket_bounds` has only
    /// one element, there are no finite buckets, and that single element is the
    /// common boundary of the overflow and underflow buckets. The values must
    /// be monotonically increasing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> BucketBounds {
      get { return bucketBounds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributionAggregationDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributionAggregationDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bucketBounds_.Equals(other.bucketBounds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bucketBounds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bucketBounds_.WriteTo(output, _repeated_bucketBounds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bucketBounds_.CalculateSize(_repeated_bucketBounds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributionAggregationDescriptor other) {
      if (other == null) {
        return;
      }
      bucketBounds_.Add(other.bucketBounds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 9: {
            bucketBounds_.AddEntriesFrom(input, _repeated_bucketBounds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An IntervalAggreation records summary stats over various time
  /// windows. These stats are approximate, with the degree of accuracy
  /// controlled by setting the n_sub_intervals parameter in the
  /// IntervalAggregationDescriptor.
  /// </summary>
  public sealed partial class IntervalAggregation : pb::IMessage<IntervalAggregation> {
    private static readonly pb::MessageParser<IntervalAggregation> _parser = new pb::MessageParser<IntervalAggregation>(() => new IntervalAggregation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntervalAggregation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.StatsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntervalAggregation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntervalAggregation(IntervalAggregation other) : this() {
      intervals_ = other.intervals_.Clone();
      tags_ = other.tags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntervalAggregation Clone() {
      return new IntervalAggregation(this);
    }

    /// <summary>Field number for the "intervals" field.</summary>
    public const int IntervalsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Stats.IntervalAggregation.Types.Interval> _repeated_intervals_codec
        = pb::FieldCodec.ForMessage(10, global::Opencensus.Proto.Stats.IntervalAggregation.Types.Interval.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Stats.IntervalAggregation.Types.Interval> intervals_ = new pbc::RepeatedField<global::Opencensus.Proto.Stats.IntervalAggregation.Types.Interval>();
    /// <summary>
    /// Full set of intervals for this aggregation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Stats.IntervalAggregation.Types.Interval> Intervals {
      get { return intervals_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Stats.Tag> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(18, global::Opencensus.Proto.Stats.Tag.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Stats.Tag> tags_ = new pbc::RepeatedField<global::Opencensus.Proto.Stats.Tag>();
    /// <summary>
    /// Tags associated with this IntervalAggregation. These will be filled in
    /// based on the View specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Stats.Tag> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntervalAggregation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntervalAggregation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!intervals_.Equals(other.intervals_)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= intervals_.GetHashCode();
      hash ^= tags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      intervals_.WriteTo(output, _repeated_intervals_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += intervals_.CalculateSize(_repeated_intervals_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntervalAggregation other) {
      if (other == null) {
        return;
      }
      intervals_.Add(other.intervals_);
      tags_.Add(other.tags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            intervals_.AddEntriesFrom(input, _repeated_intervals_codec);
            break;
          }
          case 18: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the IntervalAggregation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Summary statistic over a single time interval.
      /// </summary>
      public sealed partial class Interval : pb::IMessage<Interval> {
        private static readonly pb::MessageParser<Interval> _parser = new pb::MessageParser<Interval>(() => new Interval());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Interval> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Opencensus.Proto.Stats.IntervalAggregation.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interval() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interval(Interval other) : this() {
          IntervalSize = other.intervalSize_ != null ? other.IntervalSize.Clone() : null;
          count_ = other.count_;
          sum_ = other.sum_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Interval Clone() {
          return new Interval(this);
        }

        /// <summary>Field number for the "interval_size" field.</summary>
        public const int IntervalSizeFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Duration intervalSize_;
        /// <summary>
        /// The interval duration. Must be positive.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration IntervalSize {
          get { return intervalSize_; }
          set {
            intervalSize_ = value;
          }
        }

        /// <summary>Field number for the "count" field.</summary>
        public const int CountFieldNumber = 2;
        private double count_;
        /// <summary>
        /// Approximate number of measurements recorded in this interval.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        /// <summary>Field number for the "sum" field.</summary>
        public const int SumFieldNumber = 3;
        private double sum_;
        /// <summary>
        /// The cumulative sum of measurements in this interval.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Sum {
          get { return sum_; }
          set {
            sum_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Interval);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Interval other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(IntervalSize, other.IntervalSize)) return false;
          if (Count != other.Count) return false;
          if (Sum != other.Sum) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (intervalSize_ != null) hash ^= IntervalSize.GetHashCode();
          if (Count != 0D) hash ^= Count.GetHashCode();
          if (Sum != 0D) hash ^= Sum.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (intervalSize_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(IntervalSize);
          }
          if (Count != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Count);
          }
          if (Sum != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Sum);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (intervalSize_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(IntervalSize);
          }
          if (Count != 0D) {
            size += 1 + 8;
          }
          if (Sum != 0D) {
            size += 1 + 8;
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Interval other) {
          if (other == null) {
            return;
          }
          if (other.intervalSize_ != null) {
            if (intervalSize_ == null) {
              intervalSize_ = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            IntervalSize.MergeFrom(other.IntervalSize);
          }
          if (other.Count != 0D) {
            Count = other.Count;
          }
          if (other.Sum != 0D) {
            Sum = other.Sum;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (intervalSize_ == null) {
                  intervalSize_ = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(intervalSize_);
                break;
              }
              case 17: {
                Count = input.ReadDouble();
                break;
              }
              case 25: {
                Sum = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// An IntervalAggreationDescriptor specifies time intervals for an
  /// IntervalAggregation.
  /// </summary>
  public sealed partial class IntervalAggregationDescriptor : pb::IMessage<IntervalAggregationDescriptor> {
    private static readonly pb::MessageParser<IntervalAggregationDescriptor> _parser = new pb::MessageParser<IntervalAggregationDescriptor>(() => new IntervalAggregationDescriptor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntervalAggregationDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.StatsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntervalAggregationDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntervalAggregationDescriptor(IntervalAggregationDescriptor other) : this() {
      nSubIntervals_ = other.nSubIntervals_;
      intervalSizes_ = other.intervalSizes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntervalAggregationDescriptor Clone() {
      return new IntervalAggregationDescriptor(this);
    }

    /// <summary>Field number for the "n_sub_intervals" field.</summary>
    public const int NSubIntervalsFieldNumber = 1;
    private int nSubIntervals_;
    /// <summary>
    /// Number of internal sub-intervals to use when collecting stats for each
    /// interval. The max error in interval measurements will be approximately
    /// 1/n_sub_intervals (although in practice, this will only be approached in
    /// the presence of very large and bursty workload changes), and underlying
    /// memory usage will be roughly proportional to the value of this
    /// field. Must be in the range [2, 20]. A value of 5 will be used if this is
    /// unspecified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NSubIntervals {
      get { return nSubIntervals_; }
      set {
        nSubIntervals_ = value;
      }
    }

    /// <summary>Field number for the "interval_sizes" field.</summary>
    public const int IntervalSizesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Duration> _repeated_intervalSizes_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Duration.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> intervalSizes_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration>();
    /// <summary>
    /// The size of each interval, as a time duration. Must have at least one
    /// element.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Duration> IntervalSizes {
      get { return intervalSizes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntervalAggregationDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntervalAggregationDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NSubIntervals != other.NSubIntervals) return false;
      if(!intervalSizes_.Equals(other.intervalSizes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NSubIntervals != 0) hash ^= NSubIntervals.GetHashCode();
      hash ^= intervalSizes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NSubIntervals != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NSubIntervals);
      }
      intervalSizes_.WriteTo(output, _repeated_intervalSizes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NSubIntervals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NSubIntervals);
      }
      size += intervalSizes_.CalculateSize(_repeated_intervalSizes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntervalAggregationDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.NSubIntervals != 0) {
        NSubIntervals = other.NSubIntervals;
      }
      intervalSizes_.Add(other.intervalSizes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NSubIntervals = input.ReadInt32();
            break;
          }
          case 18: {
            intervalSizes_.AddEntriesFrom(input, _repeated_intervalSizes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Tag: key-value pair.
  /// Both strings must be printable ASCII.
  /// </summary>
  public sealed partial class Tag : pb::IMessage<Tag> {
    private static readonly pb::MessageParser<Tag> _parser = new pb::MessageParser<Tag>(() => new Tag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.StatsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tag(Tag other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tag Clone() {
      return new Tag(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tag other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A ViewDescriptor specifies an AggregationDescriptor and a set of tag
  /// keys. Views instantiated from this descriptor will contain Aggregations
  /// broken down by the unique set of matching tag values for each measurement.
  /// </summary>
  public sealed partial class ViewDescriptor : pb::IMessage<ViewDescriptor> {
    private static readonly pb::MessageParser<ViewDescriptor> _parser = new pb::MessageParser<ViewDescriptor>(() => new ViewDescriptor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ViewDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.StatsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewDescriptor(ViewDescriptor other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      measurementDescriptorName_ = other.measurementDescriptorName_;
      tagKeys_ = other.tagKeys_.Clone();
      switch (other.AggregationCase) {
        case AggregationOneofCase.IntervalAggregation:
          IntervalAggregation = other.IntervalAggregation.Clone();
          break;
        case AggregationOneofCase.DistributionAggregation:
          DistributionAggregation = other.DistributionAggregation.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewDescriptor Clone() {
      return new ViewDescriptor(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of view. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// More detailed description, for documentation purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "measurement_descriptor_name" field.</summary>
    public const int MeasurementDescriptorNameFieldNumber = 3;
    private string measurementDescriptorName_ = "";
    /// <summary>
    /// Name of a MeasurementDescriptor to be used for this view.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeasurementDescriptorName {
      get { return measurementDescriptorName_; }
      set {
        measurementDescriptorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interval_aggregation" field.</summary>
    public const int IntervalAggregationFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.IntervalAggregationDescriptor IntervalAggregation {
      get { return aggregationCase_ == AggregationOneofCase.IntervalAggregation ? (global::Opencensus.Proto.Stats.IntervalAggregationDescriptor) aggregation_ : null; }
      set {
        aggregation_ = value;
        aggregationCase_ = value == null ? AggregationOneofCase.None : AggregationOneofCase.IntervalAggregation;
      }
    }

    /// <summary>Field number for the "distribution_aggregation" field.</summary>
    public const int DistributionAggregationFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.DistributionAggregationDescriptor DistributionAggregation {
      get { return aggregationCase_ == AggregationOneofCase.DistributionAggregation ? (global::Opencensus.Proto.Stats.DistributionAggregationDescriptor) aggregation_ : null; }
      set {
        aggregation_ = value;
        aggregationCase_ = value == null ? AggregationOneofCase.None : AggregationOneofCase.DistributionAggregation;
      }
    }

    /// <summary>Field number for the "tag_keys" field.</summary>
    public const int TagKeysFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_tagKeys_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> tagKeys_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Tag keys to match with a given measurement. If no keys are specified,
    /// then all stats are recorded. Keys must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TagKeys {
      get { return tagKeys_; }
    }

    private object aggregation_;
    /// <summary>Enum of possible cases for the "aggregation" oneof.</summary>
    public enum AggregationOneofCase {
      None = 0,
      IntervalAggregation = 4,
      DistributionAggregation = 5,
    }
    private AggregationOneofCase aggregationCase_ = AggregationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AggregationOneofCase AggregationCase {
      get { return aggregationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAggregation() {
      aggregationCase_ = AggregationOneofCase.None;
      aggregation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ViewDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ViewDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (MeasurementDescriptorName != other.MeasurementDescriptorName) return false;
      if (!object.Equals(IntervalAggregation, other.IntervalAggregation)) return false;
      if (!object.Equals(DistributionAggregation, other.DistributionAggregation)) return false;
      if(!tagKeys_.Equals(other.tagKeys_)) return false;
      if (AggregationCase != other.AggregationCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (MeasurementDescriptorName.Length != 0) hash ^= MeasurementDescriptorName.GetHashCode();
      if (aggregationCase_ == AggregationOneofCase.IntervalAggregation) hash ^= IntervalAggregation.GetHashCode();
      if (aggregationCase_ == AggregationOneofCase.DistributionAggregation) hash ^= DistributionAggregation.GetHashCode();
      hash ^= tagKeys_.GetHashCode();
      hash ^= (int) aggregationCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (MeasurementDescriptorName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeasurementDescriptorName);
      }
      if (aggregationCase_ == AggregationOneofCase.IntervalAggregation) {
        output.WriteRawTag(34);
        output.WriteMessage(IntervalAggregation);
      }
      if (aggregationCase_ == AggregationOneofCase.DistributionAggregation) {
        output.WriteRawTag(42);
        output.WriteMessage(DistributionAggregation);
      }
      tagKeys_.WriteTo(output, _repeated_tagKeys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (MeasurementDescriptorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeasurementDescriptorName);
      }
      if (aggregationCase_ == AggregationOneofCase.IntervalAggregation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IntervalAggregation);
      }
      if (aggregationCase_ == AggregationOneofCase.DistributionAggregation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DistributionAggregation);
      }
      size += tagKeys_.CalculateSize(_repeated_tagKeys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ViewDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.MeasurementDescriptorName.Length != 0) {
        MeasurementDescriptorName = other.MeasurementDescriptorName;
      }
      tagKeys_.Add(other.tagKeys_);
      switch (other.AggregationCase) {
        case AggregationOneofCase.IntervalAggregation:
          if (IntervalAggregation == null) {
            IntervalAggregation = new global::Opencensus.Proto.Stats.IntervalAggregationDescriptor();
          }
          IntervalAggregation.MergeFrom(other.IntervalAggregation);
          break;
        case AggregationOneofCase.DistributionAggregation:
          if (DistributionAggregation == null) {
            DistributionAggregation = new global::Opencensus.Proto.Stats.DistributionAggregationDescriptor();
          }
          DistributionAggregation.MergeFrom(other.DistributionAggregation);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            MeasurementDescriptorName = input.ReadString();
            break;
          }
          case 34: {
            global::Opencensus.Proto.Stats.IntervalAggregationDescriptor subBuilder = new global::Opencensus.Proto.Stats.IntervalAggregationDescriptor();
            if (aggregationCase_ == AggregationOneofCase.IntervalAggregation) {
              subBuilder.MergeFrom(IntervalAggregation);
            }
            input.ReadMessage(subBuilder);
            IntervalAggregation = subBuilder;
            break;
          }
          case 42: {
            global::Opencensus.Proto.Stats.DistributionAggregationDescriptor subBuilder = new global::Opencensus.Proto.Stats.DistributionAggregationDescriptor();
            if (aggregationCase_ == AggregationOneofCase.DistributionAggregation) {
              subBuilder.MergeFrom(DistributionAggregation);
            }
            input.ReadMessage(subBuilder);
            DistributionAggregation = subBuilder;
            break;
          }
          case 50: {
            tagKeys_.AddEntriesFrom(input, _repeated_tagKeys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DistributionView contains all aggregations for a view specified using a
  /// DistributionAggregationDescriptor.
  /// </summary>
  public sealed partial class DistributionView : pb::IMessage<DistributionView> {
    private static readonly pb::MessageParser<DistributionView> _parser = new pb::MessageParser<DistributionView>(() => new DistributionView());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributionView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.StatsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionView(DistributionView other) : this() {
      aggregations_ = other.aggregations_.Clone();
      Start = other.start_ != null ? other.Start.Clone() : null;
      End = other.end_ != null ? other.End.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributionView Clone() {
      return new DistributionView(this);
    }

    /// <summary>Field number for the "aggregations" field.</summary>
    public const int AggregationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Stats.DistributionAggregation> _repeated_aggregations_codec
        = pb::FieldCodec.ForMessage(10, global::Opencensus.Proto.Stats.DistributionAggregation.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Stats.DistributionAggregation> aggregations_ = new pbc::RepeatedField<global::Opencensus.Proto.Stats.DistributionAggregation>();
    /// <summary>
    /// Aggregations - each will have a unique set of tag values for the tag_keys
    /// associated with the corresponding View.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Stats.DistributionAggregation> Aggregations {
      get { return aggregations_; }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp start_;
    /// <summary>
    /// Start and end timestamps over which aggregations was accumulated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributionView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributionView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!aggregations_.Equals(other.aggregations_)) return false;
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= aggregations_.GetHashCode();
      if (start_ != null) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      aggregations_.WriteTo(output, _repeated_aggregations_codec);
      if (start_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += aggregations_.CalculateSize(_repeated_aggregations_codec);
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributionView other) {
      if (other == null) {
        return;
      }
      aggregations_.Add(other.aggregations_);
      if (other.start_ != null) {
        if (start_ == null) {
          start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.end_ != null) {
        if (end_ == null) {
          end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        End.MergeFrom(other.End);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            aggregations_.AddEntriesFrom(input, _repeated_aggregations_codec);
            break;
          }
          case 18: {
            if (start_ == null) {
              start_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(start_);
            break;
          }
          case 26: {
            if (end_ == null) {
              end_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(end_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// IntervalView contains all aggregations for a view specified using a
  /// IntervalAggregationDescriptor.
  /// </summary>
  public sealed partial class IntervalView : pb::IMessage<IntervalView> {
    private static readonly pb::MessageParser<IntervalView> _parser = new pb::MessageParser<IntervalView>(() => new IntervalView());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntervalView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.StatsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntervalView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntervalView(IntervalView other) : this() {
      aggregations_ = other.aggregations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntervalView Clone() {
      return new IntervalView(this);
    }

    /// <summary>Field number for the "aggregations" field.</summary>
    public const int AggregationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Opencensus.Proto.Stats.IntervalAggregation> _repeated_aggregations_codec
        = pb::FieldCodec.ForMessage(10, global::Opencensus.Proto.Stats.IntervalAggregation.Parser);
    private readonly pbc::RepeatedField<global::Opencensus.Proto.Stats.IntervalAggregation> aggregations_ = new pbc::RepeatedField<global::Opencensus.Proto.Stats.IntervalAggregation>();
    /// <summary>
    /// Aggregations - each will have a unique set of tag values for the tag_keys
    /// associated with the corresponding View.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Opencensus.Proto.Stats.IntervalAggregation> Aggregations {
      get { return aggregations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntervalView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntervalView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!aggregations_.Equals(other.aggregations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= aggregations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      aggregations_.WriteTo(output, _repeated_aggregations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += aggregations_.CalculateSize(_repeated_aggregations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntervalView other) {
      if (other == null) {
        return;
      }
      aggregations_.Add(other.aggregations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            aggregations_.AddEntriesFrom(input, _repeated_aggregations_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A View contains the aggregations based on a ViewDescriptor.
  /// </summary>
  public sealed partial class View : pb::IMessage<View> {
    private static readonly pb::MessageParser<View> _parser = new pb::MessageParser<View>(() => new View());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<View> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Opencensus.Proto.Stats.StatsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View(View other) : this() {
      viewName_ = other.viewName_;
      switch (other.ViewCase) {
        case ViewOneofCase.DistributionView:
          DistributionView = other.DistributionView.Clone();
          break;
        case ViewOneofCase.IntervalView:
          IntervalView = other.IntervalView.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View Clone() {
      return new View(this);
    }

    /// <summary>Field number for the "view_name" field.</summary>
    public const int ViewNameFieldNumber = 1;
    private string viewName_ = "";
    /// <summary>
    /// ViewDescriptor name associated with this set of View.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ViewName {
      get { return viewName_; }
      set {
        viewName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "distribution_view" field.</summary>
    public const int DistributionViewFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.DistributionView DistributionView {
      get { return viewCase_ == ViewOneofCase.DistributionView ? (global::Opencensus.Proto.Stats.DistributionView) view_ : null; }
      set {
        view_ = value;
        viewCase_ = value == null ? ViewOneofCase.None : ViewOneofCase.DistributionView;
      }
    }

    /// <summary>Field number for the "interval_view" field.</summary>
    public const int IntervalViewFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Opencensus.Proto.Stats.IntervalView IntervalView {
      get { return viewCase_ == ViewOneofCase.IntervalView ? (global::Opencensus.Proto.Stats.IntervalView) view_ : null; }
      set {
        view_ = value;
        viewCase_ = value == null ? ViewOneofCase.None : ViewOneofCase.IntervalView;
      }
    }

    private object view_;
    /// <summary>Enum of possible cases for the "view" oneof.</summary>
    public enum ViewOneofCase {
      None = 0,
      DistributionView = 2,
      IntervalView = 3,
    }
    private ViewOneofCase viewCase_ = ViewOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewOneofCase ViewCase {
      get { return viewCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearView() {
      viewCase_ = ViewOneofCase.None;
      view_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as View);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(View other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ViewName != other.ViewName) return false;
      if (!object.Equals(DistributionView, other.DistributionView)) return false;
      if (!object.Equals(IntervalView, other.IntervalView)) return false;
      if (ViewCase != other.ViewCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ViewName.Length != 0) hash ^= ViewName.GetHashCode();
      if (viewCase_ == ViewOneofCase.DistributionView) hash ^= DistributionView.GetHashCode();
      if (viewCase_ == ViewOneofCase.IntervalView) hash ^= IntervalView.GetHashCode();
      hash ^= (int) viewCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ViewName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ViewName);
      }
      if (viewCase_ == ViewOneofCase.DistributionView) {
        output.WriteRawTag(18);
        output.WriteMessage(DistributionView);
      }
      if (viewCase_ == ViewOneofCase.IntervalView) {
        output.WriteRawTag(26);
        output.WriteMessage(IntervalView);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ViewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ViewName);
      }
      if (viewCase_ == ViewOneofCase.DistributionView) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DistributionView);
      }
      if (viewCase_ == ViewOneofCase.IntervalView) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IntervalView);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(View other) {
      if (other == null) {
        return;
      }
      if (other.ViewName.Length != 0) {
        ViewName = other.ViewName;
      }
      switch (other.ViewCase) {
        case ViewOneofCase.DistributionView:
          if (DistributionView == null) {
            DistributionView = new global::Opencensus.Proto.Stats.DistributionView();
          }
          DistributionView.MergeFrom(other.DistributionView);
          break;
        case ViewOneofCase.IntervalView:
          if (IntervalView == null) {
            IntervalView = new global::Opencensus.Proto.Stats.IntervalView();
          }
          IntervalView.MergeFrom(other.IntervalView);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ViewName = input.ReadString();
            break;
          }
          case 18: {
            global::Opencensus.Proto.Stats.DistributionView subBuilder = new global::Opencensus.Proto.Stats.DistributionView();
            if (viewCase_ == ViewOneofCase.DistributionView) {
              subBuilder.MergeFrom(DistributionView);
            }
            input.ReadMessage(subBuilder);
            DistributionView = subBuilder;
            break;
          }
          case 26: {
            global::Opencensus.Proto.Stats.IntervalView subBuilder = new global::Opencensus.Proto.Stats.IntervalView();
            if (viewCase_ == ViewOneofCase.IntervalView) {
              subBuilder.MergeFrom(IntervalView);
            }
            input.ReadMessage(subBuilder);
            IntervalView = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
